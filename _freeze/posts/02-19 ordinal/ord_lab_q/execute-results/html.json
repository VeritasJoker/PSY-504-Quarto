{
  "hash": "0bf755afe1af17a16ab475b1a5dca9c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: Ordinal Regression\"\nsubtitle: \"Princeton University\"\ndate: \"2025-02-19\"\nauthor: \"KW\"\ncategories: [code, analysis]\noutput: \n  tufte::tufte_html:\n    css: \n    tufte_variant: \"envisioned\"\n    highlight: github-dark\n    fig_height: 10\n    fig_width: 16\n    toc: true\n    toc_depth: 1\nexecute: \n  message: false\n  warning: false\nformat: \n  html:\n    code-fold: true\n    code-overflow: wrap\nengine: knitr\n---\n\n\n# Lab 3- Ordinal Regression\n\n## Instructions\n\n-   If you are fitting a model, display the model output in a neatly formatted table. (The `tidy` and `kable` functions can help!)\n\n-   If you are creating a plot, use clear labels for all axes, titles, etc.\n\n-   If you are using Github, don't forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages. Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors.\n\n-   When you're done, we should be able to knit the final version of the QMD in your GitHub as a HTML.\n\n# Lab\n\nThe data for this week's lab is taken from the Great British Bake-off (GBBO, https://bakeoff.netlify.app/). In this lab you will be looking at `Gender` and `Age` as a predictor of technical rank. For this exercise, we will only be looking at those who were in top 3 of technical.\n\nIn the GBBO, the bakers are usually provided with a list of ingredients and basic instructions, but they may not have access to specific measurements or details on how to prepare the ingredients. The judges evaluate the bakers' finished products based on factors such as appearance, texture, and flavor, but also compare the bakers' results to a standard version of the recipe that has been prepared in advance by the judges or a baking expert.\n\nThe dataset contains 3 variables:\n\n-   `Gender`: M = MALE, F = FEMALE\n\n-   `Age`: Age of baker\n\n-   `Technical Rank`: Rank in technical (1,2,3)\n\n## Load packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(performance)\nlibrary(ordinal) #clm\nlibrary(car) # anova\nlibrary(ggeffects) #  viz\nlibrary(gofcat) # brant\nlibrary(brms)\nlibrary(emmeans) # contrasts\nlibrary(knitr)\n```\n:::\n\n\n## Load data\n\n-   Make sure only the top 3 ranks are being used. *For some reason, there are missing ranks (my guess is they did not announce rank on TV)*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbbo <- read_csv(\"https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv\")\n\n# Enter code to filter. Think about the data type that would be relevant for Rank\ngb <- gbbo %>%\n  filter(`Technical Rank` <= 3) %>%\n  mutate(`Technical Rank` = factor(`Technical Rank`, levels=c(1,2,3), ordered=TRUE),\n         Gender = factor(Gender, levels=c(\"M\",\"F\"), ordered=TRUE))\n```\n:::\n\n\n## Explore\n\n-   Plot two figures showing the percentage of bakers in each rank--- create one for `Gender` and `Age`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngb_gender <- gb %>%\n  count(Gender, `Technical Rank`) %>%\n  mutate(proportion = n / sum(n))\n\nggplot(gb_gender, aes(x = Gender, y = proportion, fill = `Technical Rank`)) +\n  geom_bar(stat='identity', position='fill') + \n  labs(x=\"Gender\", y=\"Proportion of Technical Rank\")\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngb_age <- gb %>%\n  mutate(Age = cut_number(Age,8)) %>%\n  count(Age, `Technical Rank`) %>%\n  mutate(proportion = n / sum(n))\n\n\nggplot(gb_age, aes(x = Age, y = proportion, fill = `Technical Rank`)) +\n  geom_bar(stat='identity', position='fill') + \n  labs(x=\"Age (binned)\", y=\"Proportion of Technical Rank\")\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Ordinal Analysis\n\n-   If you haven't already, convert the outcome variable to an ordered factor. What does the order here represent?\n\n    The order here represent the technical rank: first, second, third.\n\n-   Convert input variables to categorical factors as appropriate.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    str(gb)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    tibble [309 Ã— 3] (S3: tbl_df/tbl/data.frame)\n     $ Gender        : Ord.factor w/ 2 levels \"M\"<\"F\": 2 1 1 2 1 2 1 2 2 1 ...\n     $ Age           : num [1:309] 30 31 24 45 25 37 24 37 31 24 ...\n     $ Technical Rank: Ord.factor w/ 3 levels \"1\"<\"2\"<\"3\": 2 3 1 2 1 3 1 3 2 3 ...\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    gb = gb %>%\n      mutate(Technical_Rank = `Technical Rank`)\n    ```\n    :::\n\n\n-   Run a ordinal logistic regression model against all relevant input variables. Interpret the effects for `Gender`, `Age` and `Gender*Age` (even if they are non-significant).\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    model1 = clm(Technical_Rank~1 + Gender + Age, data=gb, link=\"logit\")\n    model2 = clm(Technical_Rank~1 + Gender + Age + Gender * Age, data=gb, link=\"logit\")\n    # summary(model2)\n    model2 %>% \n      tidy() %>%\n      kable()\n    ```\n    \n    ::: {.cell-output-display}\n    \n    \n    |term         |   estimate| std.error| statistic|   p.value|coef.type |\n    |:------------|----------:|---------:|---------:|---------:|:---------|\n    |1&#124;2     | -0.8419558| 0.3422080| -2.460363| 0.0138797|intercept |\n    |2&#124;3     |  0.5796803| 0.3404226|  1.702826| 0.0886007|intercept |\n    |Gender.L     |  0.8127997| 0.4758129|  1.708234| 0.0875930|location  |\n    |Age          | -0.0037139| 0.0092343| -0.402186| 0.6875471|location  |\n    |Gender.L:Age | -0.0274268| 0.0131038| -2.093039| 0.0363456|location  |\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    print(exp(0.8127997))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 2.25421\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    print(1-exp(-0.0037139))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 0.003707012\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    print(1-exp(-0.0274268))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 0.0270541\n    ```\n    \n    \n    :::\n    :::\n\n\n    Gender: The odds of being in a higher Technical_Rank category are 2.25 times greater for Females compared to Males, controlling for Age and the interaction between Gender and Age.\n\n    Age: For every one year increase in age, the odds of being in a higher Technical_Rank category decreases by approximately 0.37%, controlling for Gender and the interaction between Gender and Age.\n\n    Gender and Age: For each additional year increase in Age, the odds of being in a higher Technical_Rank category decreases by about 2.71% more for Females than for Males, controlling for Gender and Age.\n\n-   Test if the interaction is warranted\n\n#Hint: You need to create two models with clm(); one with interaction and one without. #Then you compare them using the anova test using anova()\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    anova_test <- anova(model1, model2)\n    anova_test\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLikelihood ratio tests of cumulative link models:\n \n       formula:                                         link: threshold:\nmodel1 Technical_Rank ~ 1 + Gender + Age                logit flexible  \nmodel2 Technical_Rank ~ 1 + Gender + Age + Gender * Age logit flexible  \n\n       no.par    AIC  logLik LR.stat df Pr(>Chisq)  \nmodel1      4 685.72 -338.86                        \nmodel2      5 683.28 -336.64   4.437  1    0.03517 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n\n\n:::\n:::\n\n\n```         \nYes, the interaction is warranted.\n```\n\n-   Use `ggemmeans` to create a figure showing the interaction between `Gender` and `Age` as a function of rank. Plot predicted probabilities from the model.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # print(ggemmeans(model2, terms=c(\"Age\",\"Gender\")), n = Inf)\n    \n    plot(ggemmeans(model2, terms=c(\"Gender\",\"Age\"))) +\n      labs(title = \"Predicted Probabilities of Technical Rank\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-8-1.png){width=672}\n    :::\n    \n    ```{.r .cell-code}\n    plot(ggemmeans(model2, terms=c(\"Age [all]\",\"Gender\"))) +\n      labs(title = \"Predicted Probabilities of Technical Rank\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-8-2.png){width=672}\n    :::\n    :::\n\n\n### Latent Visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_clm = MASS::polr(Technical_Rank~Gender*Age, data=gb)\n\nggeffect(ols_clm, c(\"Age[all]\", \"Gender\"), latent=TRUE) %>% plot()\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n-   Use the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    brant.test(ols_clm)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n    Brant Test:\n                    chi-sq   df   pr(>chi)\n    Omnibus          1.295    3       0.73\n    Gender.L         0.585    1       0.44\n    Age              0.415    1       0.52\n    Gender.L:Age     0.924    1       0.34\n    \n    H0: Proportional odds assumption holds\n    ```\n    \n    \n    :::\n    :::\n\n\n    The proportional odds assumption holds since all p-vlaues are \\> 0.05.\n\n    ## `brms`\n\n-   Below is a model implementation using the `brms` package. We will just use the default priors for this. The exercise is to run this code and note your observations. What are salient differences you observe in how the model fitting takes place. With respect to the results, how do you compare the results of the model you fit with `clm` and the one you fit with `brms`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ols2_brm = brm(Technical_Rank ~  Gender*Age, data=gb, family = cumulative, cores = 4,chains = 4)\n```\n:::\n\n\n```         \nThe `brm` package uses a bayesian approach, estimates parameters using Markov Chain Mote Carlo (MCMC), while the `clm` package uses a frequentist approach, estimates parameters via maximum likelihood estimation (MLE). `clm` is much faster and deterministic, while `brms` is slower and stochastic.\n\nThe results from `brms` provide posterior distributions with credible intervals, which tend to be wider than the standard errors in `clm`, reflecting greater uncertainty. While the point estimates from both models are similar, the bayesian approach allows for probabilistic statements about the parameters. The posterior distributions directly tell you the probability of a parameter being within a given range. Thus, I would say `brms` is more flexible and interpretable, while `clm` is computationally efficient and useful for quick estimation.\n```\n\n-   The `conditional_effects` function is used to plot predicted probabilities by Gender and Age across each rank.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    conditional_effects(ols2_brm, categorical = T)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-12-1.png){width=672}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-12-2.png){width=672}\n    :::\n    :::\n\n\n    This makes sense. Higher probabilities for higher Technical_Rank for females and younger ages.\n\n-   `check_predictions` from the `easystats` `performance` package is used for examining model fit (i.e., does the data fit the model being used?). Run the below code. What do you think?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_predictions(ols2_brm)\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n```         \nI would say it fits the data pretty well. The observed data is within the model-predicted data intervals.\n```\n",
    "supporting": [
      "ord_lab_q_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}