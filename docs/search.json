[
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html",
    "title": "Lab: Poisson Regression",
    "section": "",
    "text": "To complete this lab:\nCode\nlibrary(MASS)\nlibrary(tidyverse)\nlibrary(emmeans)\nlibrary(ggeffects)\nlibrary(easystats)\nlibrary(performance)\nlibrary(knitr)\nCode\nlibrary(tidyverse)\n\ndata &lt;- read_delim(\"https://raw.githubusercontent.com/jgeller112/psy504-advanced-stats/main/slides/Poisson/data/2010.csv\")\nCode\nlibrary(naniar)\n\ndata_pos &lt;- data %&gt;%\n  dplyr::select(wwwhr, wordsum, age, sex, reliten, polviews, wrkhome) %&gt;%\nreplace_with_na(.,\n             replace = list(wwwhr = c(-1, 998, 999),\n                          wordsum = c(-1, 99),\n                          reliten = c(0, 8, 9), \n             polviews = c(0, 8, 9), \n             wrkhome = c(0,8,9), \n             age=c(0, 98, 99)))\nQ: Can you explain what might be going on in the above code?\nA: The code is using dplyr package to select 7 columns, then replace the values specified in the list with NAs. For instance, it replaces wwwhr values -1, 998, and 999 to NAs.\nQ: The next step in data cleaning would be to ensure that the data in your code are aligned with the description/ usage context of the variables\nCode\ndata_pos = data_pos %&gt;%\n  mutate(age_recode = age - mean(age, na.rm=TRUE),\n         sex_recode = as.factor(sex),\n         reliten_recode = as.factor(reliten),\n         polviews_recode = as.factor(polviews),\n         wrkhome_recode = as.factor(wrkhome))"
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#missingness",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#missingness",
    "title": "Lab: Poisson Regression",
    "section": "Missingness",
    "text": "Missingness\n\n\nCode\ndata_pos %&gt;%\n  dplyr::select(reliten, reliten_recode)\n\n\n# A tibble: 2,044 × 2\n   reliten reliten_recode\n     &lt;dbl&gt; &lt;fct&gt;         \n 1       1 1             \n 2       4 4             \n 3       1 1             \n 4       1 1             \n 5       1 1             \n 6       4 4             \n 7       3 3             \n 8       1 1             \n 9       1 1             \n10       1 1             \n# ℹ 2,034 more rows\n\n\nCode\nlibrary(skimr)\nskimr::skim(data_pos)\n\n\n\n\n\n\nName\ndata_pos\n\n\nNumber of rows\n2044\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n4\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nData summaryVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nsex_recode\n0\n1.00\nFALSE\n2\n-1: 1153, 1: 891\n\n\nreliten_recode\n99\n0.95\nFALSE\n4\n2: 747, 1: 707, 4: 363, 3: 128\n\n\npolviews_recode\n71\n0.97\nFALSE\n7\n4: 746, 6: 315, 5: 265, 2: 259\n\n\nwrkhome_recode\n882\n0.57\nFALSE\n6\n1: 674, 5: 147, 2: 101, 4: 92\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nwwwhr\n996\n0.51\n9.79\n13.41\n0.00\n2.00\n5.00\n14.00\n168.00\n▇▁▁▁▁\n\n\nwordsum\n657\n0.68\n6.03\n2.07\n0.00\n5.00\n6.00\n7.00\n10.00\n▁▃▇▅▂\n\n\nage\n3\n1.00\n47.97\n17.68\n18.00\n33.00\n47.00\n61.00\n89.00\n▇▇▇▅▃\n\n\nsex\n0\n1.00\n-0.13\n0.99\n-1.00\n-1.00\n-1.00\n1.00\n1.00\n▇▁▁▁▆\n\n\nreliten\n99\n0.95\n2.08\n1.08\n1.00\n1.00\n2.00\n3.00\n4.00\n▇▇▁▂▃\n\n\npolviews\n71\n0.97\n4.08\n1.46\n1.00\n3.00\n4.00\n5.00\n7.00\n▃▂▇▃▅\n\n\nwrkhome\n882\n0.57\n2.26\n1.72\n1.00\n1.00\n1.00\n4.00\n6.00\n▇▁▁▂▁\n\n\nage_recode\n3\n1.00\n0.00\n17.68\n-29.97\n-14.97\n-0.97\n13.03\n41.03\n▇▇▇▅▃"
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#fit-a-poisson-model-to-the-data.",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#fit-a-poisson-model-to-the-data.",
    "title": "Lab: Poisson Regression",
    "section": "Fit a Poisson model to the data.",
    "text": "Fit a Poisson model to the data.\n\n\nCode\nlibrary(lme4)\nmodel1 = glm(wwwhr~age_recode+wordsum+sex_recode+reliten_recode+polviews_recode+wrkhome_recode, \n              data=data_pos,\n              family=poisson(link = \"log\"))"
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#carry-out-model-checking",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#carry-out-model-checking",
    "title": "Lab: Poisson Regression",
    "section": "Carry out model checking",
    "text": "Carry out model checking\nHint: performance package has the function you’re looking for\n\n\nCode\nlibrary(performance)\nperformance::check_model(model1, check = c(\"pp_check\", \"outliers\", \"vif\", \"overdispersion\"))"
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#find-any-outliers",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#find-any-outliers",
    "title": "Lab: Poisson Regression",
    "section": "Find any outliers",
    "text": "Find any outliers\n\n\nCode\noutlier_idx = check_outliers(model1)\noutlier_idx\n\n\n3 outliers detected: cases 72, 156, 363.\n- Based on the following method and threshold: cook (0.8).\n- For variable: (Whole model)."
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#refit-the-model-after-excluding-outliers",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#refit-the-model-after-excluding-outliers",
    "title": "Lab: Poisson Regression",
    "section": "Refit the model after excluding outliers",
    "text": "Refit the model after excluding outliers\n\n\nCode\ndata_pos2 = data_pos %&gt;%\n  filter(! row_number() %in% which(outlier_idx))\n\nmodel2 = glm(wwwhr~age+wordsum+sex_recode+reliten_recode+polviews_recode+wrkhome_recode, \n              data=data_pos2,\n              family=poisson(link=\"log\"))\n\n\n\n\nCode\nmodel_parameters(model2) %&gt;%\n  print_html()\n\n\n\n\n\n\n\n\nParameter\nCoefficient\nSE\n95% CI\nz\np\n\n\n\n\n(Intercept)\n1.89\n0.09\n(1.71, 2.07)\n20.52\n&lt; .001\n\n\nage\n-0.02\n1.10e-03\n(-0.02, -0.01)\n-15.29\n&lt; .001\n\n\nwordsum\n0.10\n7.86e-03\n(0.08, 0.11)\n12.38\n&lt; .001\n\n\nsex recode (1)\n0.22\n0.03\n(0.17, 0.27)\n8.13\n&lt; .001\n\n\nreliten recode (2)\n0.34\n0.04\n(0.26, 0.41)\n8.88\n&lt; .001\n\n\nreliten recode (3)\n0.43\n0.06\n(0.30, 0.55)\n6.68\n&lt; .001\n\n\nreliten recode (4)\n0.65\n0.04\n(0.57, 0.72)\n16.23\n&lt; .001\n\n\npolviews recode (2)\n-0.10\n0.07\n(-0.23, 0.03)\n-1.49\n0.136\n\n\npolviews recode (3)\n-0.18\n0.07\n(-0.31, -0.04)\n-2.51\n0.012\n\n\npolviews recode (4)\n-0.21\n0.06\n(-0.33, -0.08)\n-3.23\n0.001\n\n\npolviews recode (5)\n-0.06\n0.07\n(-0.19, 0.07)\n-0.92\n0.359\n\n\npolviews recode (6)\n-0.25\n0.07\n(-0.39, -0.11)\n-3.46\n&lt; .001\n\n\npolviews recode (7)\n-0.31\n0.10\n(-0.51, -0.11)\n-3.02\n0.003\n\n\nwrkhome recode (2)\n0.21\n0.04\n(0.12, 0.29)\n4.57\n&lt; .001\n\n\nwrkhome recode (3)\n0.35\n0.05\n(0.26, 0.44)\n7.50\n&lt; .001\n\n\nwrkhome recode (4)\n0.44\n0.04\n(0.35, 0.52)\n9.76\n&lt; .001\n\n\nwrkhome recode (5)\n0.24\n0.04\n(0.15, 0.32)\n5.64\n&lt; .001\n\n\nwrkhome recode (6)\n0.40\n0.06\n(0.29, 0.51)\n7.20\n&lt; .001\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck for Overdispersion\nHint: performance package has the function you’re looking for\n\n\nCode\nperformance::check_overdispersion(model2)\n\n\n# Overdispersion test\n\n       dispersion ratio =   15.102\n  Pearson's Chi-Squared = 8804.224\n                p-value =  &lt; 0.001\n\n\nWhat do you notice? And what’s a good next step forward? Can there be another model class that can fit the data? If so, fit this model to the data.\n\nThere is overdispersion, which means there is more variation in the response than what’s implied by a Poisson model. We can try to fit a negative-binomial regression model.\n\n\n\nCode\nmodel3 = glm.nb(wwwhr~age+wordsum+sex_recode+reliten_recode+polviews_recode+wrkhome_recode, \n              data=data_pos2)\n\nmodel4 = MASS::glm.nb(wwwhr~age+wordsum+sex_recode+reliten_recode+polviews_recode+wrkhome_recode, \n              data=data_pos2)"
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#which-one-is-better--your-earlier-model-or-later-model",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#which-one-is-better--your-earlier-model-or-later-model",
    "title": "Lab: Poisson Regression",
    "section": "Which one is better- your earlier model, or later model?",
    "text": "Which one is better- your earlier model, or later model?\n\n\nCode\ntest_likelihoodratio(model2, model3) %&gt;%\n  kable()\n\n\n\n\n\n\nName\nModel\ndf\ndf_diff\nChi2\np\n\n\n\n\nmodel2\nmodel2\nglm\n18\nNA\nNA\nNA\n\n\nmodel3\nmodel3\nnegbin\n19\n1\n4510.038\n0\n\n\n\n\n\nCode\ntest_likelihoodratio(model2, model4) %&gt;%\n  kable()\n\n\n\n\n\n\nName\nModel\ndf\ndf_diff\nChi2\np\n\n\n\n\nmodel2\nmodel2\nglm\n18\nNA\nNA\nNA\n\n\nmodel4\nmodel4\nnegbin\n19\n1\n4510.038\n0\n\n\n\n\n\nThe later model is better here, which means the previous poisson model was not a good fit to the data."
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#what-is-zero-inflation-is-there-zero-inflation-in-your-chosen-model",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#what-is-zero-inflation-is-there-zero-inflation-in-your-chosen-model",
    "title": "Lab: Poisson Regression",
    "section": "What is zero inflation? Is there zero-inflation in your chosen model?",
    "text": "What is zero inflation? Is there zero-inflation in your chosen model?\n\n\nCode\nperformance::check_zeroinflation(model3)\n\n\n# Check for zero-inflation\n\n   Observed zeros: 40\n  Predicted zeros: 67\n            Ratio: 1.68\n\n\nThere is no zero-inflation here since # of observed zeros &lt; # of predicted zeros.\n\nLog LambdaMean Count\n\n\n\n\nCode\nprint(coef(model4))\n\n\n     (Intercept)              age          wordsum      sex_recode1 \n      1.72933133      -0.01630350       0.10573220       0.14429163 \n reliten_recode2  reliten_recode3  reliten_recode4 polviews_recode2 \n      0.28114285       0.38546776       0.62578244       0.17573144 \npolviews_recode3 polviews_recode4 polviews_recode5 polviews_recode6 \n      0.09431515      -0.04193018       0.13914802      -0.04427420 \npolviews_recode7  wrkhome_recode2  wrkhome_recode3  wrkhome_recode4 \n     -0.15510946       0.11140958       0.31377893       0.30530537 \n wrkhome_recode5  wrkhome_recode6 \n      0.15257360       0.25947760 \n\n\nCode\nprint(exp(coef(model4)))\n\n\n     (Intercept)              age          wordsum      sex_recode1 \n       5.6368834        0.9838287        1.1115242        1.1552210 \n reliten_recode2  reliten_recode3  reliten_recode4 polviews_recode2 \n       1.3246428        1.4703019        1.8697083        1.1921179 \npolviews_recode3 polviews_recode4 polviews_recode5 polviews_recode6 \n       1.0989060        0.9589367        1.1492942        0.9566916 \npolviews_recode7  wrkhome_recode2  wrkhome_recode3  wrkhome_recode4 \n       0.8563214        1.1178527        1.3685871        1.3570393 \n wrkhome_recode5  wrkhome_recode6 \n       1.1648282        1.2962527 \n\n\nCode\nmean(exp(predict(model4, type = \"link\")))\n\n\n[1] 9.879506\n\n\n\n\n\n\nCode\nprint(mean(data_pos2$wwwhr, na.rm = TRUE))\n\n\n[1] 9.792543\n\n\nCode\ndata_pos_base = data_pos2 %&gt;%\n  filter(sex_recode==-1, reliten_recode==1, polviews_recode==1, wrkhome_recode==1)\nmean(data_pos_base$wwwhr, na.rm = TRUE)\n\n\n[1] 5.4"
  },
  {
    "objectID": "posts/03-05 poisson/poisson_lab_questions-1.html#report-your-conclusions",
    "href": "posts/03-05 poisson/poisson_lab_questions-1.html#report-your-conclusions",
    "title": "Lab: Poisson Regression",
    "section": "Report your conclusions",
    "text": "Report your conclusions\nThe coefficients of the model is roughly similar to the log value of the mean of the dependent variable. The exponential of the intercept of the model is 5.637, while the mean number of hours per week that a person spends on the internet (wwwhr) for the baseline group (sex=-1, religosity=1, political_orientation=1, work_from_home=1) is 5.4.\nBecause of the numerous number of levels for different categorical variables, here we don’t look at each level. We can use our full model to predict the dependent variable, and then take the mean of the exponential, which is 9.880, while the mean wwwhr for the whole dataset is 9.793.\nOverall, a negative-binomial regression model is a good fit to the data due to dispersion. We don’t need to use a zero-inflated model since there is no zero-inflation."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/new-post/index.html",
    "href": "posts/new-post/index.html",
    "title": "Millie",
    "section": "",
    "text": "Hello, I am Millie 🐈\n\nprint(\"I code in R\")\n\n[1] \"I code in R\"\n\n\n\nprint(\"And in Python\")\n\nAnd in Python"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html",
    "title": "Bayesian GLM",
    "section": "",
    "text": "Bayesian Inference\nGeneralized Linear Models (GLMs)"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#bayesian-glm",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#bayesian-glm",
    "title": "Bayesian GLM",
    "section": "",
    "text": "Bayesian Inference\nGeneralized Linear Models (GLMs)"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#bayes-rule",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#bayes-rule",
    "title": "Bayesian GLM",
    "section": "Bayes Rule",
    "text": "Bayes Rule\n\n\n\n\n\n\n\n\n\n\\(p(\\theta|y)\\propto p(y|\\theta)p(\\theta)\\)\n\n\n\\(p(\\theta)\\): prior distributions of the parameters\n\n\n\n\nPrior beliefs or the prior knowledge on the parameter distributions, based on the existing knowledge or the results of previous studies\n\n\n\n\n\\(p(y|\\theta)\\): probability distribution of the data given the parameters\n\n\n\n\nThe likelihood function\n\n\n\n\n\\(p(\\theta|y)\\): posterior distributions of the parameters\n\n\n\n\nProportional to the prior distributions of the parameter times the likelihood function"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference",
    "title": "Bayesian GLM",
    "section": "Frequentist vs Bayesian Inference",
    "text": "Frequentist vs Bayesian Inference\n\n\nFrequentist\n\n\nObjective probability:\n\n\n\n\nThe limit of the relative frequency of an event occuring in a large number of trials\nProbabilities are inherent properties of the phenomena under consideration.\n\n\n\nBayesian\n\n\nSubjective probability:\n\n\n\n\nReflects an individual’s degree of belief in the occurrence of an event\nUpdated as new evidence becomes available"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference-1",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference-1",
    "title": "Bayesian GLM",
    "section": "Frequentist vs Bayesian Inference",
    "text": "Frequentist vs Bayesian Inference\n\n\nFrequentist\n\n\nParameter Estimation:\n\n\n\n\nParameters are unknown and fixed\nDistinguish parameters from random variables\nUse sample data to estimate parameters with a certain level of confidence\n\n\n\nBayesian\n\n\nParameter Estimation:\n\n\n\n\nParameters are also random variables with probability distributions\nA fixed set of parameters implies a distribution over the data, \\(p(y|\\theta)\\)\nA fixed set of data implies a distribution over the parameters, \\(p(\\theta|y)\\)\nIncorporates information from both the prior distribution and the likelihood function"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference-2",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference-2",
    "title": "Bayesian GLM",
    "section": "Frequentist vs Bayesian Inference",
    "text": "Frequentist vs Bayesian Inference\n\n\nFrequentist\n\n\nHypothesis Testing:\n\n\n\n\nFormulating null and alternative hypotheses\nCollecting sample data\nMaking decisions based on the probability of observing the data under the assumption that the null hypothesis is true\np-values: probability of obtaining the observed data or more extreme data if the null is true\n\n\n\nBayesian\n\n\nBayesian Inference:\n\n\n\n\nDefine a prior distribution based on existing knowledge\nCollect sample data\nDevelop a likelihood function that describes the probability of observing the collected data given different values of the parameter\nUse Bayes’ Theorem to update the prior distribution and obtain the posterior distribution\nMake inference about the parameter based on the posterior distribution"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference-3",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#frequentist-vs-bayesian-inference-3",
    "title": "Bayesian GLM",
    "section": "Frequentist vs Bayesian Inference",
    "text": "Frequentist vs Bayesian Inference\n\n\nFrequentist\n\n\np-values:\n\n\n\n\nthe probability of obtaining the observed data or more extreme data under the assumption that the null hypothesis is true\n\n\n\n\nConfidence intervals:\n\n\n\n\ncontain the true parameter value with a certain frequency in repeated sampling\n\n\n\nBayesian\n\n\nposterior probabilities:\n\n\n\n\nthe probability of hypotheses given the data\n\n\n\n\nCredible intervals:\n\n\n\n\ncontain the true parameter value with a certain level of credibility based on the posterior distribution"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#why-bayesian",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#why-bayesian",
    "title": "Bayesian GLM",
    "section": "Why Bayesian?",
    "text": "Why Bayesian?\n\n\nFrequentist\n\n\nLimitations:\n\n\n\n\nSubjectivity in the null hypothesis choice\nConfidence intervals can be misinterpreted\nFixed Parameter Assumption\n\n\n\nBayesian\n\n\nAdvantages:\n\n\n\n\nIncorporating prior information\nUncertainty quantification"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#markov-chain-monte-carlo-mcmc",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#markov-chain-monte-carlo-mcmc",
    "title": "Bayesian GLM",
    "section": "Markov Chain Monte Carlo (MCMC)",
    "text": "Markov Chain Monte Carlo (MCMC)\n\n\nDeveloped in the 1940s by physicists at Los Alamos\nAn algorithm used to draw samples from a probability distribution\nMonte Carlo: Use random samples over a distribution to estimate solutions or perform simulations\nMarkov Chain: A sequence of random variables where the next state depends only on the current state\nGeneral procedure:\n\n\n\n\nStarts with an initial guess (or “seed”) and iteratively propose new values based on the current value and the target distribution\nThese proposed values are accepted or rejected based on a probability that depends on the target distribution\nOver many iterations, the sequence of samples forms a distribution that approximates the target posterior distribution"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#generalized-linear-models-glms",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#generalized-linear-models-glms",
    "title": "Bayesian GLM",
    "section": "Generalized Linear Models (GLMs)",
    "text": "Generalized Linear Models (GLMs)\n\n\nExtends ordinary linear regression models\nA link function that connects the linear predictor and the expected value or mean of \\(y\\).\nExamples\n\n\n\n\nLogistic regression\nOrdinal regression\nMultinomial regression\nPoisson regression\nNegative binomial regression"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#bayesian-glm-1",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#bayesian-glm-1",
    "title": "Bayesian GLM",
    "section": "Bayesian GLM",
    "text": "Bayesian GLM\n\nBayesian Inference\nGeneralized Linear Models (GLMs)"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#bayesian-logistic-regression",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#bayesian-logistic-regression",
    "title": "Bayesian GLM",
    "section": "Bayesian Logistic Regression",
    "text": "Bayesian Logistic Regression\n\n# load data\ndata &lt;- read.csv(\"logistic.csv\")\nhead(data) %&gt;% kable()\n\n\n\n\nage\nsex\nsei10\npolviews\nmass_trans_spend_right\n\n\n\n\n47\nMale\n87.9\nModerate\n0\n\n\n61\nMale\n38.3\nLiberal\n0\n\n\n43\nFemale\n21.8\nModerate\n0\n\n\n55\nFemale\n39.7\nSlightly liberal\n0\n\n\n53\nFemale\n44.6\nSlightly liberal\n1\n\n\n50\nMale\n80.7\nSlightly liberal\n0"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#fitting-logistic",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#fitting-logistic",
    "title": "Bayesian GLM",
    "section": "Fitting Logistic",
    "text": "Fitting Logistic\nFrequentist Logistic Regression\n\nlog_model_freq = glm(\n  mass_trans_spend_right ~ 1 + age + sex + sei10,\n  family=binomial,\n  data=data\n)\n\nBayesian Logistic Regression\n\ninvisible({capture.output({\n\nlog_model_bay = brm(\n  mass_trans_spend_right ~ 1 + age + sex + sei10,\n  family=bernoulli(link=\"logit\"),\n  data=data,\n  warmup=500,\n  iter=2000,\n  cores=2,\n  chains=2,\n  seed=123\n)\n\n})})"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#evaluating-logistic",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#evaluating-logistic",
    "title": "Bayesian GLM",
    "section": "Evaluating Logistic",
    "text": "Evaluating Logistic\n\n\n\ntab_model(log_model_freq)\n\n\n\n\n \nmass_trans_spend_right\n\n\nPredictors\nOdds Ratios\nCI\np\n\n\n(Intercept)\n2.28\n1.74 – 3.00\n&lt;0.001\n\n\nage\n0.99\n0.99 – 1.00\n0.007\n\n\nsex [Male]\n0.77\n0.66 – 0.91\n0.001\n\n\nsei10\n0.99\n0.99 – 1.00\n&lt;0.001\n\n\nObservations\n2590\n\n\nR2 Tjur\n0.014\n\n\n\n\n\n\n\n\n\ntab_model(log_model_bay)\n\n\n\n\n \nmass_trans_spend_right\n\n\nPredictors\nOdds Ratios\nCI (95%)\n\n\nIntercept\n2.28\n1.74 – 2.98\n\n\nage\n0.99\n0.99 – 1.00\n\n\nsex: Male\n0.77\n0.66 – 0.91\n\n\nsei10\n0.99\n0.99 – 1.00\n\n\nObservations\n2590\n\n\nR2 Bayes\n0.015"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#marginal-effects",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#marginal-effects",
    "title": "Bayesian GLM",
    "section": "Marginal Effects",
    "text": "Marginal Effects\n\n\n\n# predicted probability\npp_sex &lt;- ggemmeans(log_model_freq, terms = c(\"sex\"))\nggplot(pp_sex, aes(x = x, y = predicted, color = x)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +\n  labs(title = \"Effect of Sex on Satisfaction with Mass Transportation\",\n       x = \"Sex\", y = \"Predicted Probability\",\n       color = \"Sex\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n# marginal effects\nce = conditional_effects(log_model_bay, effects=\"sex\")\nplot(ce, ask = FALSE)"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#marginal-effects-1",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#marginal-effects-1",
    "title": "Bayesian GLM",
    "section": "Marginal Effects",
    "text": "Marginal Effects\n\n\n\n# predicted probability\npp_ses &lt;- ggemmeans(log_model_freq, terms = \"sei10 [all]\")\nggplot(pp_ses, aes(x = x, y = predicted)) +\n  geom_line(color = \"#2c7fb8\", size = 1) + \n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = \"#2c7fb8\", alpha = 0.2) +  # Add a confidence interval band\n  labs(title = \"Effect of SES on Satisfaction with Mass Transportation\",\n       x = \"Socioeconomic Status\", y = \"Predicted Probability\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")  \n\n\n\n\n\n\n\n\n\n\n# marginal effects\nce = conditional_effects(log_model_bay, effects=\"sei10\")\nplot(ce, ask = FALSE)"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#plotting-parameters",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#plotting-parameters",
    "title": "Bayesian GLM",
    "section": "Plotting Parameters",
    "text": "Plotting Parameters\nParameter distribution\n\n\n\nmcmc_plot(log_model_bay, type=\"intervals\")\n\n\n\n\n\n\n\n\n\n\nmcmc_plot(log_model_bay, type=\"hist\", bins=30)\n\n\n\n\n\n\n\n# mcmc_plot(log_model_bay, type=\"dens\")"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#plotting-parameters-1",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#plotting-parameters-1",
    "title": "Bayesian GLM",
    "section": "Plotting Parameters",
    "text": "Plotting Parameters\n\n\nTrace\n\nmcmc_plot(log_model_bay, type=\"trace\")"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#plotting-parameters-2",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#plotting-parameters-2",
    "title": "Bayesian GLM",
    "section": "Plotting Parameters",
    "text": "Plotting Parameters\n\n\nTwo parameters\n\nmcmc_plot(log_model_bay, variable=c(\"b_Intercept\", \"b_age\"), type=\"scatter\")"
  },
  {
    "objectID": "posts/03-31 bayesian GLM/bayesian glm.html#other-glms",
    "href": "posts/03-31 bayesian GLM/bayesian glm.html#other-glms",
    "title": "Bayesian GLM",
    "section": "Other GLMs",
    "text": "Other GLMs\nLots of Bayesian GLMs, all in one package!\n\nmodel = brm(\n  y ~ 1 + x1 + x2 + x3 + (1+x4|x3), # multilevel\n  family=bernoulli(link=\"logit\"), # logistic\n  family=cumulative(link=\"logit\"), # ordinal\n  family=categorical(link=\"logit\"), # multinomial\n  family=poisson(link=\"log\"), # poisson\n  family=negbinomial(link=\"log\") # negative binomial\n  family=zero_inflated_poisson(link=\"log\") # zero-inflated poisson\n  family=zero_inflated_negbinomial(link=\"log\") # zero-inflated negbinom\n  data=data,\n  warmup=500,\n  iter=2000,\n  cores=2,\n  chains=2,\n  seed=123\n)"
  },
  {
    "objectID": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html",
    "href": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html",
    "title": "Lab: Multinomial Regression",
    "section": "",
    "text": "Lab Goal: Predict voting frequency using demographic variables Data source: FiveThirtyEight “Why Many Americans Don’t Vote” survey Method: Multinomial logistic regression"
  },
  {
    "objectID": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#data",
    "href": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#data",
    "title": "Lab: Multinomial Regression",
    "section": "Data",
    "text": "Data\nThe data for this assignment comes from an online Ipsos survey that was conducted for the FiveThirtyEight article “Why Many Americans Don’t Vote”. You can read more about the survey design and respondents in the README of the GitHub repo for the data.\nRespondents were asked a variety of questions about their political beliefs, thoughts on multiple issues, and voting behavior. We will focus on using the demographic variables and someone’s party identification to understand whether a person is a probable voter.\nThe variables we’ll focus on were (definitions from the codebook in data set GitHub repo):\n\nppage: Age of respondent\neduc: Highest educational attainment category.\n\nrace: Race of respondent, census categories. Note: all categories except Hispanic were non-Hispanic.\ngender: Gender of respondent\nincome_cat: Household income category of respondent\nQ30: Response to the question “Generally speaking, do you think of yourself as a…”\n\n1: Republican\n2: Democrat\n3: Independent\n4: Another party, please specify\n5: No preference\n-1: No response\n\nvoter_category: past voting behavior:\n\nalways: respondent voted in all or all-but-one of the elections they were eligible in\nsporadic: respondent voted in at least two, but fewer than all-but-one of the elections they were eligible in\nrarely/never: respondent voted in 0 or 1 of the elections they were eligible in\n\n\nYou can read in the data directly from the GitHub repo:\n\n\nCode\nlibrary(nnet)\nlibrary(car)\nlibrary(tidyverse)\nlibrary(emmeans)\nlibrary(ggeffects)\nlibrary(knitr)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(parameters)\nlibrary(easystats)\n\n\n\n\nCode\nvoter_data &lt;- read_csv(\"https://raw.githubusercontent.com/fivethirtyeight/data/master/non-voters/nonvoters_data.csv\")"
  },
  {
    "objectID": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#lrt",
    "href": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#lrt",
    "title": "Lab: Multinomial Regression",
    "section": "LRT",
    "text": "LRT\n\nRun the full model and report overall significance of each of the terms\n\n\nCode\ncar::Anova(model2) %&gt;% \n  kable()\n\n\n\n\n\n\nLR Chisq\nDf\nPr(&gt;Chisq)\n\n\n\n\nppage\n638.297213\n2\n0.000000\n\n\nrace\n52.651508\n6\n0.000000\n\n\ngender\n6.027914\n2\n0.049097\n\n\nincome_cat\n67.721466\n6\n0.000000\n\n\neduc\n154.136763\n4\n0.000000\n\n\npol_ident_new\n153.843978\n6\n0.000000\n\n\n\n\n\n\nAll the terms: age, race, gender, income, education, and party identification are all significant in predicting voter category"
  },
  {
    "objectID": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#marginal-effects-political-group---emmeans",
    "href": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#marginal-effects-political-group---emmeans",
    "title": "Lab: Multinomial Regression",
    "section": "Marginal Effects Political Group - Emmeans",
    "text": "Marginal Effects Political Group - Emmeans\n\n\nCode\n#Get estimated marginal means from the model\n\n#using \nmultinomial_analysis &lt;- emmeans(model2, ~ pol_ident_new|voter_category)\n\ncoefs = contrast(regrid(multinomial_analysis, \"log\"),\"trt.vs.ctrl1\",  by=\"pol_ident_new\")\n# you can add a parameter to the above command, ref = newbaseline, if you want to change baseline\n\nupdate(coefs, by = \"contrast\") %&gt;%\n kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\npol_ident_new\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nDem\n0.961\n0.070\n28\n13.722\n0.000\n\n\nalways - (rarely/never)\nDem\n0.480\n0.074\n28\n6.498\n0.000\n\n\nsporadic - (rarely/never)\nIndep\n0.591\n0.077\n28\n7.643\n0.000\n\n\nalways - (rarely/never)\nIndep\n-0.049\n0.084\n28\n-0.590\n0.900\n\n\nsporadic - (rarely/never)\nOther\n0.078\n0.087\n28\n0.902\n0.747\n\n\nalways - (rarely/never)\nOther\n-0.835\n0.110\n28\n-7.577\n0.000\n\n\nsporadic - (rarely/never)\nRep\n0.883\n0.084\n28\n10.469\n0.000\n\n\nalways - (rarely/never)\nRep\n0.327\n0.089\n28\n3.672\n0.004"
  },
  {
    "objectID": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#marginal-effects-of-education---emmeans",
    "href": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#marginal-effects-of-education---emmeans",
    "title": "Lab: Multinomial Regression",
    "section": "Marginal Effects of Education - Emmeans",
    "text": "Marginal Effects of Education - Emmeans\n\n\nCode\n#Get estimated marginal means from the model\n\n#using \nmultinomial_analysis &lt;- emmeans(model2, ~ educ|voter_category)\n\ncoefs = contrast(regrid(multinomial_analysis, \"log\"),\"trt.vs.ctrl1\",  by=\"educ\")\n# you can add a parameter to the above command, ref = newbaseline, if you want to change baseline\n\nupdate(coefs, by = \"contrast\") %&gt;%\n kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\neduc\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nCollege\n0.986\n0.076\n28\n12.904\n0.000\n\n\nalways - (rarely/never)\nCollege\n0.477\n0.080\n28\n5.960\n0.000\n\n\nsporadic - (rarely/never)\nHigh school or less\n0.187\n0.069\n28\n2.705\n0.031\n\n\nalways - (rarely/never)\nHigh school or less\n-0.711\n0.080\n28\n-8.883\n0.000\n\n\nsporadic - (rarely/never)\nSome college\n0.707\n0.074\n28\n9.512\n0.000\n\n\nalways - (rarely/never)\nSome college\n0.167\n0.079\n28\n2.114\n0.112\n\n\n\n\n\n\nNext, plot the predicted probabilities of voter category as a function of Age and Party ID\n\n\n\nCode\n  ggemmeans(model2, terms = c(\"ppage\")) %&gt;% \n      ggplot(., aes(x = x, y = predicted, fill = response.level)) +\n      geom_area() + \n      geom_rug(sides = \"b\", position = \"jitter\", alpha = .5) + \n      labs(x = \"\\nAge\", y = \"Predicted Probablity\\n\", title = \"Predicted Probabilities of Voting Frequency by Age\") +\n      scale_fill_manual(\n        name = NULL,\n        values = c(\"always\" = \"#F6B533\", \"sporadic\" = \"#D07EA2\", \"rarely/never\" = \"#9854F7\"),\n        labels = c(\"RARELY OR NEVER VOTE    \", \"SOMETIMES VOTE    \", \"ALMOST ALWAYS VOTE    \"),\n        breaks = c(\"rarely/never\", \"sporadic\", \"always\")\n      ) +\n      theme_minimal()\n\n\n\n\n\n\n\n\n\nCode\n ggemmeans(model2, terms=c(\"pol_ident_new\")) %&gt;%   ggplot(., aes(x = x, y = predicted, fill = response.level)) + \n  geom_bar(stat = \"identity\" ) +\n    geom_text(aes(label = round(predicted, 3)), color=\"white\", position = position_fill(vjust = 0.5),size=3)  + \n  labs(x=\"Education\", y=\"Predicted Probablity\") + \n  theme(text = element_text(size = 30)) +  \n  scale_fill_viridis(discrete = TRUE) + \n  theme_lucid(base_size=25)\n\n\n\n\n\n\n\n\n\nPlot predicted probabilities as a function of education and voting frequency.\n\n\nCode\n ggemmeans(model2, terms=c(\"educ\")) %&gt;% ggplot(., aes(x = x, y = predicted, fill = response.level)) + \n  geom_bar(stat = \"identity\" ) +\n    geom_text(aes(label = round(predicted, 3)), color=\"white\", position = position_fill(vjust = 0.5),size=3)  + \n  labs(x=\"Education\", y=\"Predicted Probablity\") + \n  theme(text = element_text(size = 30)) +  \n  scale_fill_viridis(discrete = TRUE) + \n  theme_lucid(base_size=25)"
  },
  {
    "objectID": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#write-up",
    "href": "posts/02-26 multinomial/Lab4_multinom_Questions-1.html#write-up",
    "title": "Lab: Multinomial Regression",
    "section": "Write-up",
    "text": "Write-up\n\nDifferences between political groups and voting behavior - Emmeans\n\n\nCode\nmultinomial_analysis &lt;- emmeans(model2, ~ pol_ident_new|voter_category)\n\ncoefs = contrast(regrid(multinomial_analysis, \"log\"),\"trt.vs.ctrl1\",  by=\"pol_ident_new\")\n# you can add a parameter to the above command, ref = newbaseline, if you want to change baseline\n\nupdate(coefs, by = \"contrast\") %&gt;%\n kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\npol_ident_new\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nDem\n0.961\n0.070\n28\n13.722\n0.000\n\n\nalways - (rarely/never)\nDem\n0.480\n0.074\n28\n6.498\n0.000\n\n\nsporadic - (rarely/never)\nIndep\n0.591\n0.077\n28\n7.643\n0.000\n\n\nalways - (rarely/never)\nIndep\n-0.049\n0.084\n28\n-0.590\n0.900\n\n\nsporadic - (rarely/never)\nOther\n0.078\n0.087\n28\n0.902\n0.747\n\n\nalways - (rarely/never)\nOther\n-0.835\n0.110\n28\n-7.577\n0.000\n\n\nsporadic - (rarely/never)\nRep\n0.883\n0.084\n28\n10.469\n0.000\n\n\nalways - (rarely/never)\nRep\n0.327\n0.089\n28\n3.672\n0.004\n\n\n\n\n\nCode\n# get difference between yes-no and fair-excellent\ncontrast(coefs, \"revpairwise\", by = \"contrast\") %&gt;%\n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast1\ncontrast\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nIndep - Dem\nsporadic - (rarely/never)\n-0.370\n0.094\n28\n-3.933\n0.003\n\n\nOther - Dem\nsporadic - (rarely/never)\n-0.883\n0.103\n28\n-8.578\n0.000\n\n\nOther - Indep\nsporadic - (rarely/never)\n-0.513\n0.107\n28\n-4.807\n0.000\n\n\nRep - Dem\nsporadic - (rarely/never)\n-0.078\n0.099\n28\n-0.787\n0.860\n\n\nRep - Indep\nsporadic - (rarely/never)\n0.292\n0.099\n28\n2.965\n0.029\n\n\nRep - Other\nsporadic - (rarely/never)\n0.805\n0.109\n28\n7.404\n0.000\n\n\nIndep - Dem\nalways - (rarely/never)\n-0.529\n0.101\n28\n-5.255\n0.000\n\n\nOther - Dem\nalways - (rarely/never)\n-1.315\n0.125\n28\n-10.508\n0.000\n\n\nOther - Indep\nalways - (rarely/never)\n-0.786\n0.129\n28\n-6.072\n0.000\n\n\nRep - Dem\nalways - (rarely/never)\n-0.153\n0.104\n28\n-1.470\n0.468\n\n\nRep - Indep\nalways - (rarely/never)\n0.376\n0.104\n28\n3.605\n0.006\n\n\nRep - Other\nalways - (rarely/never)\n1.162\n0.130\n28\n8.969\n0.000\n\n\n\n\n\nEnter your interpretation here:\nVoters who are Democrats are 2.61 times more likely to vote sporadically than vote rarely/never.\nVoters who are Democrats are 1.62 times more likely to vote always than vote rarely/never.\nVoters who are Independents are 1.81 times more likely to vote sporadically than vote rarely/never.\nVoters who are Independents are 4.78% less likely to vote always than vote rarely/never.\nVoters who belong to other political parties are 1.08 times more likely to vote sporadically than vote rarely/never.\nVoters who belong to other political parties are 56.61% less likely to vote always than vote rarely/never.\nVoters who are Republicans are 2.42 times more likely to vote sporadically than vote rarely/never.\nVoters who are Republicans are 1.39 times more likely to vote always than vote rarely/never.\nVoters who are Independents are 30.93% less likely to vote sporadically than vote rarely/never compared to voters who are Democrats.\nVoters who belong to voters who belong to other political parties are 58.65% less likely to vote sporadically than vote rarely/never compared to voters who are Democrats.\nVoters who belong to other political parties are 40.13% less likely to vote sporadically than vote rarely/never compared to voters who are Republicans.\nVoters who are Republicans are 7.50% less likely to vote sporadically than vote rarely/never compared to voters who are Democrats.\nVoters who are Republicans are 1.34 times more likely to vote sporadically than vote rarely/never compared to voters who are Independents.\nVoters who are Republicans are 2.24 times more likely to vote sporadically than vote rarely/never compared to voters who belong to other political parties.\nVoters who are Independents are 41.08% less likely to vote always than vote rarely/never compared to voters who are Democrats.\nVoters who belong to other political parties are 73.15% less likely to vote always than vote rarely/never compared to voters who are Democrats.\nVoters who belong to other political parties are 54.43% less likely to vote always than vote rarely/never compared to voters who are Republicans.\nVoters who are Republicans are 14.19% less likely to vote always than vote rarely/never compared to voters who are Democrats.\nVoters who are Republicans are 1.46 times more likely to vote always than vote rarely/never compared to voters who are Independents.\nVoters who are Republicans are 3.20 times more likely to vote always than vote rarely/never compared to voters who belong to other political parties.\n\n\nDifferences between education level and voting behavior - Emmeans\nLast part of the assignment: Interpret the results from running the following code for your model\n\n\nCode\nmulti_an &lt;- emmeans(model, ~ educ|voter_category)\n\ncoefs = contrast(regrid(multi_an, \"log\"),\"trt.vs.ctrl1\",  by=\"educ\")\n\nupdate(coefs, by = \"contrast\") %&gt;% \n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\neduc\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nCollege\n1.156\n0.075\n22\n15.483\n0.000\n\n\nalways - (rarely/never)\nCollege\n0.711\n0.079\n22\n9.041\n0.000\n\n\nsporadic - (rarely/never)\nHigh school or less\n0.259\n0.069\n22\n3.749\n0.003\n\n\nalways - (rarely/never)\nHigh school or less\n-0.602\n0.081\n22\n-7.476\n0.000\n\n\nsporadic - (rarely/never)\nSome college\n0.806\n0.075\n22\n10.818\n0.000\n\n\nalways - (rarely/never)\nSome college\n0.311\n0.080\n22\n3.895\n0.002\n\n\n\n\n\nCode\n# get difference between yes-no and fair-excellent\ncontrast(coefs, \"revpairwise\", by = \"contrast\") %&gt;%\n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast1\ncontrast\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nHigh school or less - College\nsporadic - (rarely/never)\n-0.897\n0.095\n22\n-9.409\n0.000\n\n\nSome college - College\nsporadic - (rarely/never)\n-0.349\n0.092\n22\n-3.779\n0.003\n\n\nSome college - High school or less\nsporadic - (rarely/never)\n0.547\n0.089\n22\n6.162\n0.000\n\n\nHigh school or less - College\nalways - (rarely/never)\n-1.313\n0.105\n22\n-12.463\n0.000\n\n\nSome college - College\nalways - (rarely/never)\n-0.401\n0.098\n22\n-4.091\n0.001\n\n\nSome college - High school or less\nalways - (rarely/never)\n0.913\n0.099\n22\n9.206\n0.000\n\n\n\n\n\nEnter your interpretation here:\nVoters with a highest degree of college are 3.18 times more likely to vote sporadically than vote rarely/never.\nVoters with a highest degree of college are 2.04 times more likely to vote always than vote rarely/never.\nVoters with a highest degree of high school or less are 1.30 times more likely to vote sporadically than vote rarely/never.\nVoters with a highest degree of high school or less are 45.23% less likely to vote always than vote rarely/never.\nVoters with a highest degree of some college are 2.24 times more likely to vote sporadically than vote rarely/never.\nVoters with a highest degree of some college are 1.36 times more likely to vote always than vote rarely/never.\nVoters with a highest degree of high school or less are 59.22% less likely to vote sporadically than vote rarely/never compared to voters with a highest degree of college.\nVoters with a highest degree of some college are 29.46% less likely to vote sporadically than vote rarely/never compared to voters with a highest degree of college.\nVoters with a highest degree of some college are 1.73 times more likely to vote sporadically than vote rarely/never compared to voters with a highest degree of high school or less.\nVoters with a highest degree of high school or less are 73.10% less likely to vote always than vote rarely/never compared to voters with a highest degree of college.\nVoters with a highest degree of some college are 33.03% less likely to vote always than vote rarely/never compared to voters with a highest degree of college.\nVoters with a highest degree of some college are 2.49 times more likely to vote always than vote rarely/never compared to voters with a highest degree of high school or less."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html",
    "title": "Lab: Logistic Regression",
    "section": "",
    "text": "Assignment requirements:\n\nIf you are using Github (recommended), make sure to commit and push your work to GitHub regularly, at least after each exercise. Write short and informative commit messages, and share the link to your assignment with me. If not, you can also send me the rmd & rendered file via Canvas.\nIn this assignment, you will not need to code from scratch. Rather, you’ll need to fill in code where needed. This assignment has a logisitic regression implementation for a scenario from EDA down to model comparison (and would be useful for whenever you may encounter such a situation in the future).\nI want the assignments to begin reflecting a bit more of how you’d be doing things on your own, where you have some prior knowledge and you figure other things out (by referring to documentation, etc.) . In addition to the rmd, I also want you to submit to me notes of anything new that you learn while finishing the assignment. And any pain-points, and we’ll discuss more.\n\nNote:\n\nIf you are fitting a model, display the model output in a neatly formatted table. (The gt tidy and kable functions can help!). Modelsummary also looks good(https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html)\nMake sure that your plots are clearly labeled – for all axes, titles, etc."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#data-general-social-survey",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#data-general-social-survey",
    "title": "Lab: Logistic Regression",
    "section": "Data: General Social Survey",
    "text": "Data: General Social Survey\nThe General Social Survey (GSS) has been used to measure trends in attitudes and behaviors in American society since 1972. In addition to collecting demographic information, the survey includes questions used to gauge attitudes about government spending priorities, confidence in institutions, lifestyle, and many other topics. A full description of the survey may be found here.\nThe data for this lab are from the 2016 General Social Survey. The original data set contains 2867 observations and 935 variables. We will use and abbreviated data set that includes the following variables:\nnatmass: Respondent’s answer to the following prompt:\n“We are faced with many problems in this country, none of which can be solved easily or inexpensively. I’m going to name some of these problems, and for each one I’d like you to tell me whether you think we’re spending too much money on it, too little money, or about the right amount…are we spending too much, too little, or about the right amount on mass transportation?”\nage: Age in years.\nsex: Sex recorded as male or female\nsei10: Socioeconomic index from 0 to 100\nregion: Region where interview took place\npolviews: Respondent’s answer to the following prompt:\n“We hear a lot of talk these days about liberals and conservatives. I’m going to show you a seven-point scale on which the political views that people might hold are arranged from extremely liberal - point 1 - to extremely conservative - point 7. Where would you place yourself on this scale?”\nThe data are in gss2016.csv in the data folder."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#eda",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#eda",
    "title": "Lab: Logistic Regression",
    "section": "EDA",
    "text": "EDA\n\nLet’s begin by making a binary variable for respondents’ views on spending on mass transportation. Create a new variable that is equal to “1” if a respondent said spending on mass transportation is about right and “0” otherwise. Then plot the proportion of the response variable, using informative labels for each category.\n\n\n\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(ggrepel)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(knitr)\nlibrary(easystats)\nlibrary(broom)\nlibrary(emmeans)\nlibrary(marginaleffects)\nlibrary(performance)\nlibrary(arm)\nlibrary(modelsummary)\n\n\n\n\nCode\n# load data\ndata &lt;- read.csv(\"gss2016.csv\")\n\n\nFill in the “____” below to encode the binary variable\n\n\nCode\ndata &lt;- data %&gt;%\n   mutate(mass_trans_spend_right = ifelse(natmass==\"About right\", 1, 0))\n\n\n\n\nCode\n#Get proportions\nmass_spend_summary &lt;- data %&gt;%\n  count(mass_trans_spend_right) %&gt;%\n  mutate(proportion = n / sum(n))\n\n#Look at the dataframe structure. And make sure it's in a format that you can use for plotting.\n#Change structure if neederd\nmass_spend_long &lt;- mass_spend_summary %&gt;% mutate(opinion=\"Opinion\")\n\n#Factorise for plot\nmass_spend_long$mass_trans_spend_right &lt;- as.factor(mass_spend_long$mass_trans_spend_right)\n\n#Make plot\n#Hint: geom_bar lets you make stacked bar charts\nggplot(mass_spend_long, aes(x = opinion, y = proportion, fill = mass_trans_spend_right)) +\n geom_bar(stat='identity') +\n  geom_text(aes(label=proportion),\n            vjust=ifelse(mass_spend_long$mass_trans_spend_right==0, -7, 7)\n            ) + \n  labs(x=\"Views on mass transportation spending\", y=\"Proportion\")\n\n\n\n\n\n\n\n\n\n\nRecode polviews so it is a factor with levels that are in an order that is consistent with question on the survey. Note how the categories are spelled in the data.\n\n\n\nCode\ndata &lt;- data %&gt;%\n  mutate(polviews = factor(polviews,\n                           levels = c(\"Extremely liberal\",\"Liberal\", \"Slightly liberal\", \"Moderate\", \"Slghtly conservative\", \"Conservative\", \"Extrmly conservative\"),\n                           ordered = TRUE))\n\n\n\nMake a plot of the distribution of polviews\n\n\n\nCode\n#Get proportions, format, and produce a plot like you did previously for \n\nmass_spend_summary &lt;- data %&gt;%\n  count(polviews) %&gt;%\n  mutate(proportion = n / sum(n))\n\n#Look at the dataframe structure. And make sure it's in a format that you can use for plotting.\n#Change structure if neederd\nmass_spend_long &lt;- mass_spend_summary %&gt;% mutate(opinion=\"Opinion\")\n\n#Make plot\n#Hint: geom_bar lets you make stacked bar charts\nggplot(mass_spend_long, aes(x = opinion, y = proportion, fill = polviews)) +\n geom_bar(stat='identity') + \n  labs(x=\"Views on mass transportation spending\", y=\"Proportion\")\n\n\n\n\n\n\n\n\n\n\nWhich political view occurs most frequently in this data set?\nModerate occurs most frequently.\n\n\nMake a plot displaying the relationship between satisfaction with mass transportation spending and political views. Use the plot to describe the relationship the two variables.\n\n\n\nCode\nmass_spend_summary &lt;- data %&gt;%\n  count(polviews, mass_trans_spend_right) %&gt;%\n  mutate(proportion = n / sum(n))\n\nmass_spend_summary$mass_trans_spend_right &lt;- as.factor(mass_spend_summary$mass_trans_spend_right)\n\nggplot(mass_spend_summary, aes(x = polviews, y = proportion, fill = mass_trans_spend_right)) +\n geom_bar(stat='identity', position='fill') +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + \n  labs(x=\"Political Views\", y=\"Satisfaction Proportion\")\n\n\n\n\n\n\n\n\n\nThe more conservative one’s political views are the more they think the amount of spending on mass transportation is correct.\n\nWe’d like to use age as a quantitative variable in your model; however, it is currently a character data type because some observations are coded as “89 or older”.\n\n\nRecode age so that is a numeric variable. Note: Before making the variable numeric, you will need to replace the values “89 or older” with a single value.\n\n\n\nCode\ndata &lt;- data %&gt;%\n  mutate(age = ifelse(age == \"89 or older\", 89, age), \n         age = as.numeric(age))\n\n\n\nPlot the frequency distribution of age.\n\n\n\nCode\nggplot(data, aes(x = age)) +\n  geom_histogram(bins=30, fill=\"lightblue\", color=\"grey\") +\n  labs(x=\"Age\", y=\"Frequency\")"
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#logistic-regression",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#logistic-regression",
    "title": "Lab: Logistic Regression",
    "section": "Logistic regression",
    "text": "Logistic regression\n\nLet’s start by fitting a logistic regression model with just the intercept\n\n\n\nCode\nintercept_only_model &lt;- glm(\n  mass_trans_spend_right ~ 1,\n  family=binomial,\n  data=data\n  ) \n\nintercept_only_model %&gt;% \n  tidy() %&gt;%\n  kable()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n0.1190594\n0.0393685\n3.024229\n0.0024927\n\n\n\n\n\n\nInterpret the intercept in the context of the data. You can do this by converting the \\(\\beta_0\\) parameter out of the log-odds metric to the probability metric. Make sure to include the 95% confidence intervals. Then interpret the results in a sentence or two–what is the basic thing this probability tells us about?\n\n\n\nCode\nb0 &lt;- coef(intercept_only_model) # get coef\n\nb0_transformed &lt;- exp(b0) / (1 + exp(b0)) # logistic transform\n\nci_lower = b0 - 1.96 * 0.0393685\nci_upper = b0 + 1.96 * 0.0393685\n\n#transforming confidence intervals of coefficients into probabilities\np_lower = exp(ci_lower) / (1 + exp(ci_lower))\np_upper = exp(ci_upper) / (1 + exp(ci_upper))\n\n\nlogit_to_prob &lt;- function(logit){\n  return(exp(logit) / (1 + exp(logit)))\n}\n\nlogit_to_prob(coef(intercept_only_model))\n\n\n(Intercept) \n  0.5297297 \n\n\nCode\nlogit_to_prob(confint(intercept_only_model))\n\n\n    2.5 %    97.5 % \n0.5104854 0.5489153 \n\n\nInterpretation: The converted \\(\\beta_0\\) parameter in probability is 0.5297 (95%CI [ 0.5105, 0.5489]). This probability should just be the proportion of mass_trans_spend_right = 1 in the data.\n\nNow let’s fit a model using the demographic factors - age,sex, sei10 - to predict the odds a person is satisfied with spending on mass transportation. Make any necessary adjustments to the variables so the intercept will have a meaningful interpretation. Neatly display the model coefficients (do not display the summary output)\n\n\n\nCode\n#make sure that sex is a factor (i.e. to make sure R knows it's binary/categorical, and not continuous)\ndata = data %&gt;%\n  mutate(sex=factor(sex, levels=c(\"Male\", \"Female\")))\n\n#fit with glm()\nm1 &lt;- glm(\n  mass_trans_spend_right ~ 1 + age + sex + sei10,\n  family=binomial,\n  data=data\n  ) \n\n#produce tidy output of model coefficients\nm1 %&gt;% \n  tidy() %&gt;%\n  kable()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n0.5697071\n0.1409061\n4.043169\n0.0000527\n\n\nage\n-0.0061659\n0.0022824\n-2.701502\n0.0069027\n\n\nsexFemale\n0.2557439\n0.0798020\n3.204732\n0.0013519\n\n\nsei10\n-0.0062271\n0.0016609\n-3.749229\n0.0001774\n\n\n\n\n\n\nConsider the relationship between sex and one’s opinion about spending on mass transportation. Interpret the coefficient of sex in terms of the logs odds and OR of being satisfied with spending on mass transportation. What are the predicted probabilities for males and females on support for spending on mass transportation? Please include the 95% CIs around each estimate.\n\n\n\nCode\n# m1 %&gt;% \n#   tidy() %&gt;%\n#   kable()\n\nm1 %&gt;% \n  tidy(exponentiate = TRUE) %&gt;%\n  kable()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n1.7677492\n0.1409061\n4.043169\n0.0000527\n\n\nage\n0.9938530\n0.0022824\n-2.701502\n0.0069027\n\n\nsexFemale\n1.2914219\n0.0798020\n3.204732\n0.0013519\n\n\nsei10\n0.9937922\n0.0016609\n-3.749229\n0.0001774\n\n\n\n\n\nCode\nbsex &lt;- coef(m1)[\"sexFemale\"]\nstdsex = m1 %&gt;%\n  tidy %&gt;%\n  filter(`term` == \"sexFemale\") %&gt;%\n  pull(`std.error`)\n\nci_lower_lo = bsex - 1.96 * stdsex\nci_upper_lo = bsex + 1.96 * stdsex\n\nci_lower_or = 1.29 - 1.96 * stdsex\nci_upper_or = 1.29 + 1.96 * stdsex\nprint(paste0(\"Increase in log odds: \", round(bsex,4), \" (95% CI [\", round(ci_lower_lo,4), \" \", round(ci_upper_lo,4), \"])\"))\n\n\n[1] \"Increase in log odds: 0.2557 (95% CI [0.0993 0.4122])\"\n\n\nCode\nprint(paste0(\"Odds ratio: \", round(exp(bsex),4), \" (95% CI [\", round(ci_lower_or,4), \" \", round(ci_upper_or,4), \"])\"))\n\n\n[1] \"Odds ratio: 1.2914 (95% CI [1.1336 1.4464])\"\n\n\nCode\nemm_sex &lt;- emmeans(m1, \"sex\", type = \"response\")\nemm_sex\n\n\n sex     prob     SE  df asymp.LCL asymp.UCL\n Male   0.495 0.0147 Inf     0.467     0.524\n Female 0.559 0.0133 Inf     0.533     0.585\n\nConfidence level used: 0.95 \nIntervals are back-transformed from the logit scale \n\n\nIf you did this right, you’ll find that being female (as compared to male) is associated with an increase in the log-odds of being satisfied with spending on mass transportation by 0.2557439 units (95% CI [0.09, 0.41]), holding all other variables constant. This equates to the odds of thinking the spending amount is right in females being 1.29 times the odds of thinking this in men (95% CI [1.13, 1.44]).\nThe predicted probability for females to be satisfied with spending on mass transportation is 55.9% (95% CI [53.3%, 58.5%]) and that of males is 49.5% (95% CI [46.7%, 52.4%]).\n\nVerify this.\n\nNext, consider the relationship between age and one’s opinion about spending on mass transportation. Interpret the coefficient of age in terms of the logs odds and OR of being satisfied with spending on mass transportation. Please include the 95% CIs around each estimate.\n\n\n\nCode\nbage &lt;- coef(m1)[\"age\"]\nstdage = m1 %&gt;%\n  tidy %&gt;%\n  filter(`term` == \"age\") %&gt;%\n  pull(`std.error`)\n\nci_lower_lo = bage - 1.96 * stdage\nci_upper_lo = bage + 1.96 * stdage\n\nor = exp(bage)\nci_lower_or = exp(bage) - 1.96 * stdage\nci_upper_or = exp(bage) + 1.96 * stdage\n\nprint(paste0(\"Increase in log odds: \", round(bage,4), \" (95% CI [\", round(ci_lower_lo,4), \" \", round(ci_upper_lo,4), \"])\"))\n\n\n[1] \"Increase in log odds: -0.0062 (95% CI [-0.0106 -0.0017])\"\n\n\nCode\nprint(paste0(\"Odds ratio: \", round(or,4), \" (95% CI [\", round(ci_lower_or,4), \" \", round(ci_upper_or,4), \"])\"))\n\n\n[1] \"Odds ratio: 0.9939 (95% CI [0.9894 0.9983])\"\n\n\nA one unit increase in age is associated with a decrease in the log-odds of being satisfied with spending on mass transportation by 0.00617 (95% CI [-0.0106, -0.0017]), holding all other variables constant. The odds ratio is 0.993853 (95% CI [0.9894, 0.9983]) which confirms the inverse relationship implied by the log-odds coefficient. Specifically, for each additional unit of age, the odds of being satisfied with mass transportation spending decrease by a factor of about 0.993853, or approximately 0.617% per unit increase in age, holding other factors constant.\n\nConsider the relationship between SES and one’s opinion about spending on mass transportation. Interpret the coefficient of SES in terms of the logs odds and OR of being satisfied with spending on mass transportation. Please include the 95% CIs around each estimate. ß\n\n\n\nCode\nbses &lt;- coef(m1)[\"sei10\"]\nstdses = m1 %&gt;%\n  tidy %&gt;%\n  filter(`term` == \"sei10\") %&gt;%\n  pull(`std.error`)\n\nci_lower_lo = bses - 1.96 * stdses\nci_upper_lo = bses + 1.96 * stdses\n\nor = exp(bses)\nci_lower_or = exp(bses) - 1.96 * stdses\nci_upper_or = exp(bses) + 1.96 * stdses\n\nprint(paste0(\"Increase in log odds: \", round(bses,4), \" (95% CI [\", round(ci_lower_lo,4), \" \", round(ci_upper_lo,4), \"])\"))\n\n\n[1] \"Increase in log odds: -0.0062 (95% CI [-0.0095 -0.003])\"\n\n\nCode\nprint(paste0(\"Odds ratio: \", round(or,4), \" (95% CI [\", round(ci_lower_or,4), \" \", round(ci_upper_or,4), \"])\"))\n\n\n[1] \"Odds ratio: 0.9938 (95% CI [0.9905 0.997])\"\n\n\nA one unit increase in SES index is associated with a decrease in the log-odds of being satisfied with spending on mass transportation by 0.0062 units (95% CI [-0.0095, -0.003]), holding all other variables constant. The odds ratio is less than 1 (0.9937922), which confirms the negative relationship implied by the log-odds coefficient. Specifically, for each additional unit of SES index, the odds of being satisfied with mass transportation spending decrease by a factor of about 0.993, or approximately 0.7% per unit increase in SES index, holding other factors constant (95% CI [0.989, 0.998])."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#marginal-effects",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#marginal-effects",
    "title": "Lab: Logistic Regression",
    "section": "Marginal effects",
    "text": "Marginal effects\n\nLet’s examine the results on the probability scale.\n\n\nCalculate the marginal effects of sex, age, and SES on mass transportation spending. You can use the margins package function margins discussed in your textbook or you can use the marginaleffects package avg_slope avg_comparisons discussed in lecture. Interpret each estimate.\n\n\n\nCode\navg_comparisons(m1, comparison = \"difference\") %&gt;% \n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\ncontrast\nestimate\nstd.error\nstatistic\np.value\ns.value\nconf.low\nconf.high\n\n\n\n\nage\n+1\n-0.0015153\n0.0005579\n-2.716128\n0.0066050\n7.242217\n-0.0026088\n-0.0004219\n\n\nsei10\n+1\n-0.0015304\n0.0004039\n-3.789362\n0.0001510\n12.692835\n-0.0023219\n-0.0007388\n\n\nsex\nFemale - Male\n0.0630688\n0.0196461\n3.210251\n0.0013262\n9.558494\n0.0245632\n0.1015743\n\n\n\n\n\n\nThe marginal effect of age is -0.001515 (95% CI [-0.002609, -0.0004219]). So, for each additional unit increase of age, the probability of being satisfied with mass transportation spending decreases by approximately 0.1515 percentage points, holding other factors constant (p = 0.006605).\nThe marginal effect of SES is -0.001530 (95% CI [-0.002322, -0.0007388]). For each one-unit increase in the socioeconomic index, the probability of being satisfied with mass transportation spending decreases by approximately 0.1530 percentage points, holding other variables constant (p = 0.0001510).\nThe marginal effect for being female compared to male is 0.06307 (95% CI [0.02456, 0.1016]). This indicates that females are, on average, about 6.3% percentage points more likely than males to be satisfied with mass transportation spending, holding other factors constant."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#model-comparison",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#model-comparison",
    "title": "Lab: Logistic Regression",
    "section": "Model comparison",
    "text": "Model comparison\n\nNow let’s see whether a person’s political views has a significant impact on their odds of being satisfied with spending on mass transportation, after accounting for the demographic factors.\n\n\nConduct a drop-in-deviance/likelihood ratio test to determine if polviews is a significant predictor of attitude towards spending on mass transportation. Name these two models fit2 and fit3, respectively. Compare the two models.\n\n\n\nCode\nfit2 &lt;- glm(\n  mass_trans_spend_right ~ 1 + age + sex + sei10,\n  family=binomial,\n  data=data\n)\n\nfit3 &lt;- glm(\n  mass_trans_spend_right ~ 1 + age + sex + sei10 + polviews,\n  family=binomial,\n  data=data\n)\n\ntest_likelihoodratio(fit2, fit3) %&gt;% kable()\n\n\n\n\n\n\nName\nModel\ndf\ndf_diff\nChi2\np\n\n\n\n\nfit2\nfit2\nglm\n4\nNA\nNA\nNA\n\n\nfit3\nfit3\nglm\n10\n6\n63.02844\n0\n\n\n\n\n\n\nIs the model with polviews better than the model without?\n\n\nYes."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#visualization",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#visualization",
    "title": "Lab: Logistic Regression",
    "section": "Visualization",
    "text": "Visualization\n\nLet’s plot the results\nWe next use the model to produce visualizations:\n\nGiven the code below, interpet what is being plotted:\n\npol_plot : The predicted probability of being satisfied with the spending of mass transportation increases when political views become more conversative, when controlling for age, sex and SES.\nsex_plot : The predicted probability of being satisfied with the spending of mass transportation is higher for women than for men, when controlling for sex, SES, and political views.\nses_plot: The predicted probability of being satisfied with the spending of mass transportation decreases when SES increases, when controlling for age, sex, and political views.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nadjust the various settings in your plot to make it look professional.\nYou can use ggeffects to get the predicted probabilities for these models.\n\n\n\n\n\n\nCode\nlibrary(ggeffects)\n\n\ncolors &lt;- c(\"Extremely liberal\" = \"black\",\n            \"Liberal\" = \"#0e2f44\",  # Dark blue\n            \"Slightly liberal\" = \"#1d5a6c\",  # Less dark blue\n            \"Moderate\" = \"#358ca3\",  # Medium blue\n            \"Slghtly conservative\" = \"#71b9d1\",  # Light blue\n            \"Conservative\" = \"#a6dcef\",  # Lighter blue\n            \"Extrmly conservative\" = \"#d0f0fd\")  # Very light blue\n\npp_pol &lt;- ggemmeans(fit3, terms = c(\"polviews\"))\npp_pol\n\n\n# Predicted probabilities of mass_trans_spend_right\n\npolviews             | Predicted |     95% CI\n---------------------------------------------\nExtremely liberal    |      0.34 | 0.27, 0.43\nLiberal              |      0.39 | 0.34, 0.45\nSlightly liberal     |      0.49 | 0.43, 0.54\nModerate             |      0.57 | 0.53, 0.60\nSlghtly conservative |      0.55 | 0.50, 0.60\nConservative         |      0.58 | 0.53, 0.63\nExtrmly conservative |      0.66 | 0.57, 0.75\n\nAdjusted for:\n*   age = 48.90\n* sei10 = 46.07\n\n\nCode\n# Adjusted plot with gradient colors\npol_plot &lt;- ggplot(pp_pol, aes(x = x, y = predicted, color = x)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +\n  scale_color_manual(values = colors) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) + \n  labs(title = \"Effect of Political Views on Satisfaction with Mass Transportation\",\n       x = \"Political Views\", y = \"Predicted Probability\",\n       color = \"Political Views\") +\n  theme_minimal()\npol_plot\n\n\n\n\n\n\n\n\n\nCode\npp_sex &lt;- ggemmeans(fit3, terms = c(\"sex\"))\npp_sex\n\n\n# Predicted probabilities of mass_trans_spend_right\n\nsex    | Predicted |     95% CI\n-------------------------------\nMale   |      0.48 | 0.44, 0.51\nFemale |      0.55 | 0.51, 0.58\n\nAdjusted for:\n*   age = 48.90\n* sei10 = 46.07\n\n\nCode\nsex_plot &lt;- ggplot(pp_sex, aes(x = x, y = predicted, color = x)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +\n  labs(title = \"Effect of Sex on Satisfaction with Mass Transportation\",\n       x = \"Sex\", y = \"Predicted Probability\",\n       color = \"Sex\") +\n  theme_minimal()\n\nsex_plot\n\n\n\n\n\n\n\n\n\nCode\npp_ses &lt;- ggemmeans(fit3, terms = \"sei10\")\npp_ses\n\n\n# Predicted probabilities of mass_trans_spend_right\n\nsei10 | Predicted |     95% CI\n------------------------------\n    0 |      0.57 | 0.52, 0.61\n   15 |      0.55 | 0.51, 0.58\n   25 |      0.54 | 0.51, 0.57\n   35 |      0.52 | 0.50, 0.55\n   50 |      0.51 | 0.48, 0.53\n   65 |      0.49 | 0.46, 0.52\n   75 |      0.48 | 0.44, 0.51\n  100 |      0.45 | 0.40, 0.50\n\nAdjusted for:\n* age = 48.90\n\n\nCode\nses_plot &lt;-  ggplot(pp_ses, aes(x = x, y = predicted)) +\n  geom_line(color = \"#2c7fb8\", size = 1) + \n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = \"#2c7fb8\", alpha = 0.2) +  # Add a confidence interval band\n  labs(title = \"Effect of SES on Satisfaction with Mass Transportation\",\n       x = \"Socioeconomic Status\", y = \"Predicted Probability\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")  \nses_plot"
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#model-assumptions",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#model-assumptions",
    "title": "Lab: Logistic Regression",
    "section": "Model Assumptions",
    "text": "Model Assumptions\n\nIs the logistic model a good choice for this data?\n\n\n\nCode\nbinned_residuals(fit2)\n\n\nWarning: About 86% of the residuals are inside the error bounds (~95% or higher would be good).\n\n\nCode\nbinned_residuals(fit2) %&gt;% plot(show_dots=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAnswer: It seems like the model does not fit the data very well. About 86% of the residuals are inside the error bounds, as opposed to the ideal &gt;= 95%."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#model-fit",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#model-fit",
    "title": "Lab: Logistic Regression",
    "section": "Model fit",
    "text": "Model fit\n\nCalculate the \\(R^2\\) for this model\n\n\n\nCode\nr2_mcfadden(fit2)\n\n\n# R2 for Generalized Linear Regression\n       R2: 0.010\n  adj. R2: 0.009\n\n\n\nR2 interpretation: The model explains around 1% of the variance in the dependent variable, which means it is not a good fit.\nNext, Take a look at the binned residual plots for each continuous predictor variable and look at linearity. Is there a predictor that sticks out? What can we do to improve model fit in this case?\n\n\n\nCode\nbinned_residuals(fit2, term=\"sei10\")\n\n\nWarning: About 88% of the residuals are inside the error bounds (~95% or higher would be good).\n\n\nCode\nbinned_residuals(fit2, term=\"age\")\n\n\nOk: About 98% of the residuals are inside the error bounds.\n\n\nCode\nbinned_residuals(fit2, term=\"sei10\") %&gt;% plot(show_dots=TRUE)\n\n\n\n\n\n\n\n\n\nCode\nbinned_residuals(fit2, term=\"age\") %&gt;% plot(show_dots=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nHere SES seems to stick out. For SES, only 88% of the residuals are inside the error bounds while for age, about 98% of the residuals are inside the error bounds. However, for the binned residual plot, it looks like there is no systematic trends, so I think it’s reasonable to assume linearity. If we want, we can transform SES or add interaction terms to improve model fit."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#testing-polviews",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#testing-polviews",
    "title": "Lab: Logistic Regression",
    "section": "Testing Polviews",
    "text": "Testing Polviews\n\n\nCode\nemmeans(fit3, \"polviews\") %&gt;% pairs() %&gt;% as.data.frame() %&gt;% filter(p.value &lt; .05)\n\n\n contrast                                   estimate        SE  df z.ratio\n Extremely liberal - Moderate             -0.9266262 0.1950664 Inf  -4.750\n Extremely liberal - Slghtly conservative -0.8487137 0.2127293 Inf  -3.990\n Extremely liberal - Conservative         -0.9935486 0.2108369 Inf  -4.712\n Extremely liberal - Extrmly conservative -1.3402621 0.2792876 Inf  -4.799\n Liberal - Moderate                       -0.7090022 0.1308520 Inf  -5.418\n Liberal - Slghtly conservative           -0.6310897 0.1555805 Inf  -4.056\n Liberal - Conservative                   -0.7759246 0.1532081 Inf  -5.065\n Liberal - Extrmly conservative           -1.1226380 0.2392048 Inf  -4.693\n Slightly liberal - Extrmly conservative  -0.7334002 0.2412625 Inf  -3.040\n p.value\n  &lt;.0001\n  0.0013\n  0.0001\n  &lt;.0001\n  &lt;.0001\n  0.0010\n  &lt;.0001\n  0.0001\n  0.0382\n\nResults are averaged over the levels of: sex \nResults are given on the log odds ratio (not the response) scale. \nP value adjustment: tukey method for comparing a family of 7 estimates \n\n\nCode\nemmeans(fit3, \"polviews\", type=\"response\") %&gt;% pairs() %&gt;% as.data.frame() %&gt;% filter(p.value &lt; .05)\n\n\n contrast                                 odds.ratio         SE  df null\n Extremely liberal / Moderate              0.3958871 0.07722426 Inf    1\n Extremely liberal / Slghtly conservative  0.4279651 0.09104070 Inf    1\n Extremely liberal / Conservative          0.3702605 0.07806458 Inf    1\n Extremely liberal / Extrmly conservative  0.2617771 0.07311109 Inf    1\n Liberal / Moderate                        0.4921350 0.06439684 Inf    1\n Liberal / Slghtly conservative            0.5320118 0.08277063 Inf    1\n Liberal / Conservative                    0.4602780 0.07051835 Inf    1\n Liberal / Extrmly conservative            0.3254202 0.07784206 Inf    1\n Slightly liberal / Extrmly conservative   0.4802732 0.11587191 Inf    1\n z.ratio p.value\n  -4.750  &lt;.0001\n  -3.990  0.0013\n  -4.712  0.0001\n  -4.799  &lt;.0001\n  -5.418  &lt;.0001\n  -4.056  0.0010\n  -5.065  &lt;.0001\n  -4.693  0.0001\n  -3.040  0.0382\n\nResults are averaged over the levels of: sex \nP value adjustment: tukey method for comparing a family of 7 estimates \nTests are performed on the log odds ratio scale \n\n\n\nConservatives are 2.7008 and 2.1726 times more likely to support mass transit spending compared to extremely liberal and liberal\nExtreme liberals are 0.3703, 0.3959, and 0.4280 times more likely to support spending compared to conservatives, moderates and slight conservatives\nExtrm conservatives are 3.8200 and 2.0821 times more likely to support mass spending than liberals and slight liberals\nLiberals are 0.4921 and 0.5320 times more likely to support spending than moderates and slight conservatives."
  },
  {
    "objectID": "posts/02-12 logistic/Lab-Logistic-Q.html#conclusion",
    "href": "posts/02-12 logistic/Lab-Logistic-Q.html#conclusion",
    "title": "Lab: Logistic Regression",
    "section": "Conclusion",
    "text": "Conclusion\nBased on the model summary below, and the three figures, we conclude that age, sex, SES, and political views are all significant variables in predicting satisfaction of mass transit spending. Specifically, people that are younger tend to be more satisfied with mass transit spending; females are more satisfied with mass transit spending than males in general; people of lower socioeconomic status are more satisfied with mass transit spending; and people with more conservative political views are more satisfied with mass transit spending.\n\n\n\n\nDf\nDeviance\nResid. Df\nResid. Dev\nPr(&gt;Chi)\n\n\n\n\nNULL\nNA\nNA\n2589\n3581.340\nNA\n\n\nage\n1\n9.268443\n2588\n3572.072\n0.0023314\n\n\nsex\n1\n12.156624\n2587\n3559.915\n0.0004891\n\n\nsei10\n1\n14.119078\n2586\n3545.796\n0.0001716\n\n\npolviews\n6\n63.028441\n2580\n3482.768\n0.0000000\n\n\n\nTable 1\n\n\n\n\n\nFigure 1: Effect of Sex on Satisfaction with Mass Transportation\n\n\n\n\n\n\n\n\n\nFigure 2: Effect of SES on Satisfaction with Mass Transportation\n\n\n\n\n\n\n\n\n\nFigure 3: Effect of Political Views on Satisfaction with Mass Transportation"
  },
  {
    "objectID": "posts/02-19 ordinal/ord_lab_q.html",
    "href": "posts/02-19 ordinal/ord_lab_q.html",
    "title": "Lab: Ordinal Regression",
    "section": "",
    "text": "If you are fitting a model, display the model output in a neatly formatted table. (The tidy and kable functions can help!)\nIf you are creating a plot, use clear labels for all axes, titles, etc.\nIf you are using Github, don’t forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages. Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors.\nWhen you’re done, we should be able to knit the final version of the QMD in your GitHub as a HTML."
  },
  {
    "objectID": "posts/02-19 ordinal/ord_lab_q.html#instructions",
    "href": "posts/02-19 ordinal/ord_lab_q.html#instructions",
    "title": "Lab: Ordinal Regression",
    "section": "",
    "text": "If you are fitting a model, display the model output in a neatly formatted table. (The tidy and kable functions can help!)\nIf you are creating a plot, use clear labels for all axes, titles, etc.\nIf you are using Github, don’t forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages. Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors.\nWhen you’re done, we should be able to knit the final version of the QMD in your GitHub as a HTML."
  },
  {
    "objectID": "posts/02-19 ordinal/ord_lab_q.html#load-packages",
    "href": "posts/02-19 ordinal/ord_lab_q.html#load-packages",
    "title": "Lab: Ordinal Regression",
    "section": "Load packages:",
    "text": "Load packages:\n\n\nCode\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(performance)\nlibrary(ordinal) #clm\nlibrary(car) # anova\nlibrary(ggeffects) #  viz\nlibrary(gofcat) # brant\nlibrary(brms)\nlibrary(emmeans) # contrasts\nlibrary(knitr)"
  },
  {
    "objectID": "posts/02-19 ordinal/ord_lab_q.html#load-data",
    "href": "posts/02-19 ordinal/ord_lab_q.html#load-data",
    "title": "Lab: Ordinal Regression",
    "section": "Load data",
    "text": "Load data\n\nMake sure only the top 3 ranks are being used. For some reason, there are missing ranks (my guess is they did not announce rank on TV)\n\n\n\nCode\ngbbo &lt;- read_csv(\"https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv\")\n\n# Enter code to filter. Think about the data type that would be relevant for Rank\ngb &lt;- gbbo %&gt;%\n  filter(`Technical Rank` &lt;= 3) %&gt;%\n  mutate(`Technical Rank` = factor(`Technical Rank`, levels=c(1,2,3), ordered=TRUE),\n         Gender = factor(Gender, levels=c(\"M\",\"F\"), ordered=TRUE))"
  },
  {
    "objectID": "posts/02-19 ordinal/ord_lab_q.html#explore",
    "href": "posts/02-19 ordinal/ord_lab_q.html#explore",
    "title": "Lab: Ordinal Regression",
    "section": "Explore",
    "text": "Explore\n\nPlot two figures showing the percentage of bakers in each rank— create one for Gender and Age\n\n\n\nCode\ngb_gender &lt;- gb %&gt;%\n  count(Gender, `Technical Rank`) %&gt;%\n  mutate(proportion = n / sum(n))\n\nggplot(gb_gender, aes(x = Gender, y = proportion, fill = `Technical Rank`)) +\n  geom_bar(stat='identity', position='fill') + \n  labs(x=\"Gender\", y=\"Proportion of Technical Rank\")\n\n\n\n\n\n\n\n\n\n\n\nCode\ngb_age &lt;- gb %&gt;%\n  mutate(Age = cut_number(Age,8)) %&gt;%\n  count(Age, `Technical Rank`) %&gt;%\n  mutate(proportion = n / sum(n))\n\n\nggplot(gb_age, aes(x = Age, y = proportion, fill = `Technical Rank`)) +\n  geom_bar(stat='identity', position='fill') + \n  labs(x=\"Age (binned)\", y=\"Proportion of Technical Rank\")"
  },
  {
    "objectID": "posts/02-19 ordinal/ord_lab_q.html#ordinal-analysis",
    "href": "posts/02-19 ordinal/ord_lab_q.html#ordinal-analysis",
    "title": "Lab: Ordinal Regression",
    "section": "Ordinal Analysis",
    "text": "Ordinal Analysis\n\nIf you haven’t already, convert the outcome variable to an ordered factor. What does the order here represent?\nThe order here represent the technical rank: first, second, third.\nConvert input variables to categorical factors as appropriate.\n\n\nCode\nstr(gb)\n\n\ntibble [309 × 3] (S3: tbl_df/tbl/data.frame)\n $ Gender        : Ord.factor w/ 2 levels \"M\"&lt;\"F\": 2 1 1 2 1 2 1 2 2 1 ...\n $ Age           : num [1:309] 30 31 24 45 25 37 24 37 31 24 ...\n $ Technical Rank: Ord.factor w/ 3 levels \"1\"&lt;\"2\"&lt;\"3\": 2 3 1 2 1 3 1 3 2 3 ...\n\n\nCode\ngb = gb %&gt;%\n  mutate(Technical_Rank = `Technical Rank`)\n\n\nRun a ordinal logistic regression model against all relevant input variables. Interpret the effects for Gender, Age and Gender*Age (even if they are non-significant).\n\n\nCode\nmodel1 = clm(Technical_Rank~1 + Gender + Age, data=gb, link=\"logit\")\nmodel2 = clm(Technical_Rank~1 + Gender + Age + Gender * Age, data=gb, link=\"logit\")\n# summary(model2)\nmodel2 %&gt;% \n  tidy() %&gt;%\n  kable()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\ncoef.type\n\n\n\n\n1|2\n-0.8419558\n0.3422080\n-2.460363\n0.0138797\nintercept\n\n\n2|3\n0.5796803\n0.3404226\n1.702826\n0.0886007\nintercept\n\n\nGender.L\n0.8127997\n0.4758129\n1.708234\n0.0875930\nlocation\n\n\nAge\n-0.0037139\n0.0092343\n-0.402186\n0.6875471\nlocation\n\n\nGender.L:Age\n-0.0274268\n0.0131038\n-2.093039\n0.0363456\nlocation\n\n\n\n\n\nCode\nprint(exp(0.8127997))\n\n\n[1] 2.25421\n\n\nCode\nprint(1-exp(-0.0037139))\n\n\n[1] 0.003707012\n\n\nCode\nprint(1-exp(-0.0274268))\n\n\n[1] 0.0270541\n\n\nGender: The odds of being in a higher Technical_Rank category are 2.25 times greater for Females compared to Males, controlling for Age and the interaction between Gender and Age.\nAge: For every one year increase in age, the odds of being in a higher Technical_Rank category decreases by approximately 0.37%, controlling for Gender and the interaction between Gender and Age.\nGender and Age: For each additional year increase in Age, the odds of being in a higher Technical_Rank category decreases by about 2.71% more for Females than for Males, controlling for Gender and Age.\nTest if the interaction is warranted\n\n#Hint: You need to create two models with clm(); one with interaction and one without. #Then you compare them using the anova test using anova()\n\n\nCode\n    anova_test &lt;- anova(model1, model2)\n    anova_test\n\n\nLikelihood ratio tests of cumulative link models:\n \n       formula:                                         link: threshold:\nmodel1 Technical_Rank ~ 1 + Gender + Age                logit flexible  \nmodel2 Technical_Rank ~ 1 + Gender + Age + Gender * Age logit flexible  \n\n       no.par    AIC  logLik LR.stat df Pr(&gt;Chisq)  \nmodel1      4 685.72 -338.86                        \nmodel2      5 683.28 -336.64   4.437  1    0.03517 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nYes, the interaction is warranted.\n\nUse ggemmeans to create a figure showing the interaction between Gender and Age as a function of rank. Plot predicted probabilities from the model.\n\n\nCode\n# print(ggemmeans(model2, terms=c(\"Age\",\"Gender\")), n = Inf)\n\nplot(ggemmeans(model2, terms=c(\"Gender\",\"Age\"))) +\n  labs(title = \"Predicted Probabilities of Technical Rank\")\n\n\n\n\n\n\n\n\n\nCode\nplot(ggemmeans(model2, terms=c(\"Age [all]\",\"Gender\"))) +\n  labs(title = \"Predicted Probabilities of Technical Rank\")\n\n\n\n\n\n\n\n\n\n\n\nLatent Visualization\n\n\nCode\nols_clm = MASS::polr(Technical_Rank~Gender*Age, data=gb)\n\nggeffect(ols_clm, c(\"Age[all]\", \"Gender\"), latent=TRUE) %&gt;% plot()\n\n\n\n\n\n\n\n\n\n\nUse the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.\n\n\nCode\nbrant.test(ols_clm)\n\n\n\nBrant Test:\n                chi-sq   df   pr(&gt;chi)\nOmnibus          1.295    3       0.73\nGender.L         0.585    1       0.44\nAge              0.415    1       0.52\nGender.L:Age     0.924    1       0.34\n\nH0: Proportional odds assumption holds\n\n\nThe proportional odds assumption holds since all p-vlaues are &gt; 0.05.\nbrms\nBelow is a model implementation using the brms package. We will just use the default priors for this. The exercise is to run this code and note your observations. What are salient differences you observe in how the model fitting takes place. With respect to the results, how do you compare the results of the model you fit with clm and the one you fit with brms?\n\n\n\nCode\n  ols2_brm = brm(Technical_Rank ~  Gender*Age, data=gb, family = cumulative, cores = 4,chains = 4)\n\n\nThe `brm` package uses a bayesian approach, estimates parameters using Markov Chain Mote Carlo (MCMC), while the `clm` package uses a frequentist approach, estimates parameters via maximum likelihood estimation (MLE). `clm` is much faster and deterministic, while `brms` is slower and stochastic.\n\nThe results from `brms` provide posterior distributions with credible intervals, which tend to be wider than the standard errors in `clm`, reflecting greater uncertainty. While the point estimates from both models are similar, the bayesian approach allows for probabilistic statements about the parameters. The posterior distributions directly tell you the probability of a parameter being within a given range. Thus, I would say `brms` is more flexible and interpretable, while `clm` is computationally efficient and useful for quick estimation.\n\nThe conditional_effects function is used to plot predicted probabilities by Gender and Age across each rank.\n\n\nCode\nconditional_effects(ols2_brm, categorical = T)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis makes sense. Higher probabilities for higher Technical_Rank for females and younger ages.\ncheck_predictions from the easystats performance package is used for examining model fit (i.e., does the data fit the model being used?). Run the below code. What do you think?\n\n\n\nCode\ncheck_predictions(ols2_brm)\n\n\n\n\n\n\n\n\n\nI would say it fits the data pretty well. The observed data is within the model-predicted data intervals."
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html",
    "title": "Lab: Bayes_Lab_2",
    "section": "",
    "text": "For Lab 1, you had explored the data and looked at models built via lm() and via brms(using default priors). You had also drawn posterior samples after fitting the model.\nFor Lab 2, we continue with the Palmer Penguins. And we will look more at distributions and priors.\nAgain, there will be conceptual questions to answer as you work through this example, and exercises."
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#setup-packages-and-data",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#setup-packages-and-data",
    "title": "Lab: Bayes_Lab_2",
    "section": "Setup: Packages and data",
    "text": "Setup: Packages and data\nWe load the primary packages.\n\n\nCode\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(tidybayes)\nlibrary(ggdist)\n\n\nWe want the same data set up as in the last lab.\n\n\nCode\n# load the penguins data\ndata(penguins, package = \"palmerpenguins\")\n\n# subset the data\nchinstrap &lt;- penguins %&gt;% \n  filter(species == \"Chinstrap\")\n\nglimpse(chinstrap)\n\n\nRows: 68\nColumns: 8\n$ species           &lt;fct&gt; Chinstrap, Chinstrap, Chinstrap, Chinstrap, Chinstra…\n$ island            &lt;fct&gt; Dream, Dream, Dream, Dream, Dream, Dream, Dream, Dre…\n$ bill_length_mm    &lt;dbl&gt; 46.5, 50.0, 51.3, 45.4, 52.7, 45.2, 46.1, 51.3, 46.0…\n$ bill_depth_mm     &lt;dbl&gt; 17.9, 19.5, 19.2, 18.7, 19.8, 17.8, 18.2, 18.2, 18.9…\n$ flipper_length_mm &lt;int&gt; 192, 196, 193, 188, 197, 198, 178, 197, 195, 198, 19…\n$ body_mass_g       &lt;int&gt; 3500, 3900, 3650, 3525, 3725, 3950, 3250, 3750, 4150…\n$ sex               &lt;fct&gt; female, male, male, female, male, female, female, ma…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#models",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#models",
    "title": "Lab: Bayes_Lab_2",
    "section": "Models",
    "text": "Models\nOnce again, we’ll fit the model\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}_i & = \\beta_0 + \\beta_1 \\text{body\\_mass\\_g}_i + \\epsilon_i \\\\\n\\epsilon_i & \\sim \\operatorname{Normal}(0, \\sigma_\\epsilon) ,\n\\end{aligned}\n\\]\nwith both lm() and brm().\n\n\nCode\n# OLS\nfit1.ols &lt;- lm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n# Bayes\nfit1.b &lt;- brm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)"
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#bayesians-have-many-kinds-of-distributions",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#bayesians-have-many-kinds-of-distributions",
    "title": "Lab: Bayes_Lab_2",
    "section": "Bayesians have many kinds of distributions",
    "text": "Bayesians have many kinds of distributions\nIn Bayesian statistics, we have at least 6 distributions to keep track of. Those are:\n\nthe likelihood distributions\nthe prior parameter distribution (aka priors)\nthe prior predictive distributions\nthe posterior parameter distributions (aka posteriors)\nthe posterior-predictive distribution\n\nIn many respect, it’s distributions ‘all the way down,’ with Bayesians. This can be indeed be difficult to keep track of at first. But since this is true for any class of Bayesian models (not just regression), you’ll hopefully get used to it.\n\n\nQUESTION 1: How would you represent these 6 distributions mathematically, using \\(P_0\\)’\\(P\\), \\(D\\), \\(|\\), and \\(\\theta\\) ?\n\n\n\n\n\n\nTip\n\n\n\nHint 1: Many of these terms were in the Bayes Rule.\n\n\n\n\nAnswer:\nLikelihood: \\(P(D|\\theta)\\)\nPrior parameter distribution: \\(P_0(\\theta)\\)\nPrior predictive distribution \\(P0_0(D)=\\int P(D∣\\theta)P_0​(\\theta)d\\theta\\)\nPosterior parameter distribution: \\(P(\\theta∣D)\\)\nPosterior predictive distribution: \\(P(D_n​∣D)=\\int P(D_n​∣\\theta)P(\\theta∣D)d\\theta\\)\nWe also have some other distributions that follow from these. For example, - the distributions of the model expectations (i.e., the predicted means)\n\n\nLikelihood distributions.\nWe are approaching Bayesian statistics from a likelihood-based perspective. That is, we situate regression models within the greater context of a likelihood function. (There are ways to do non-parametric Bayesian statistics, which don’t focus on likelihoods. We won’t get into that right now.)\nSo far, we have been using the conventional Gaussian likelihood. If we have some variable \\(y\\), we can express it as normally distributed by\n\\[\n\\operatorname{Normal}(y \\mid \\mu, \\sigma) = \\frac{1}{\\sqrt{2 \\pi \\sigma}} \\exp \\left( \\frac{1}{2} \\left( \\frac{y - \\mu}{\\sigma}\\right)^2\\right),\n\\]\nwhere \\(\\mu\\) is the mean and \\(\\sigma\\) is the standard deviation. With this likelihood,\n\n\\(\\mu \\in \\mathbb R\\)\n\nthe mean can be any real number, ranging from \\(-\\infty\\) to \\(\\infty\\)\n\n\\(\\sigma \\in \\mathbb R_{&gt; 0}\\)\n\nthe standard deviation can take on any real number greater than zero.\n\n\nIt’s also the assumption\n\n\\(y \\in \\mathbb R\\)\n\nthe focal variable \\(y\\) can be any real number, ranging from \\(-\\infty\\) to \\(\\infty\\).\n\n\nOne of the ways we wrote our model formula back in the first file was\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 \\text{body\\_mass\\_g}_i,\n\\end{aligned}\n\\]\nand further in the discussion, we updated that equation with the posterior means for our three parameters to\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}_i & \\sim \\operatorname{Normal}(\\mu_i, 2.92) \\\\\n\\mu_i & = 32.2 + 0.004 \\text{body\\_mass\\_g}_i.\n\\end{aligned}\n\\]\nBefore we get into this, though, let’s back up and consider an intercept-only model of the form\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 ,\n\\end{aligned}\n\\]\nwhere there is no predictor variable. Here’s how to fit the model with brm().\n\n\nCode\n# Bayes\nfit0.b &lt;- brm(\n  data = chinstrap,\n  bill_length_mm ~ 1\n)\n\n\nLet’s look at the model summary.\n\n\nCode\nsummary(fit0.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept    48.85      0.40    48.05    49.65 1.00     2944     2309\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     3.37      0.29     2.88     4.00 1.00     2916     2234\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nThe intercept parameter \\(\\beta_0\\) is a stand-in for \\(\\mu\\). The \\(\\sigma\\) parameter is just \\(\\sigma\\). Here they are in a plot.\n\n\nCode\ndraws &lt;- as_draws_df(fit0.b) \n\ndraws %&gt;% \n  rename(`beta[0]==mu` = b_Intercept) %&gt;% \n  pivot_longer(`beta[0]==mu`:sigma, names_to = \"parameter\") %&gt;% \n  \n  ggplot(aes(x = value)) +\n  stat_halfeye(.width = .95, normalize = \"panels\") +\n  scale_y_continuous(NULL, breaks = NULL) +\n  xlab(\"parameter space\") +\n  facet_wrap(~ parameter, scales = \"free\", labeller = label_parsed)\n\n\n\n\n\n\n\n\n\nHere are the posterior means for those two parameters.\n\n\nCode\nmu &lt;- mean(draws$b_Intercept)\nsigma &lt;- mean(draws$sigma)\n\nmu; sigma\n\n\n[1] 48.8517\n\n\n[1] 3.374678\n\n\nWe can use dnorm() to compute the shape of \\(\\operatorname{Normal}(48.8, 3.4)\\).\n\n\nCode\ntibble(y = seq(from = 30, to = 70, by = 0.1)) %&gt;% \n  mutate(density = dnorm(x = y, mean = mu, sd = sigma)) %&gt;% \n  \n  ggplot(aes(x = y, y = density)) +\n  geom_line() +\n  xlab(\"bill_length_mm\")\n\n\n\n\n\n\n\n\n\nWe can compare this to the sample distribution of the bill_length_mm data:\n\n\nCode\nchinstrap %&gt;% \n  ggplot(aes(x = bill_length_mm)) +\n  geom_histogram(aes(y = after_stat(density)),\n                 binwidth = 2.5) +\n  geom_line(data = tibble(bill_length_mm = seq(from = 30, to = 70, by = 0.1)),\n            aes(y = dnorm(x = bill_length_mm, mean = mu, sd = sigma)),\n            color = \"red\")\n\n\n\n\n\n\n\n\n\nIt’s not a great fit, but not horrible either.\nNow let’s see what this means for our univariable model fit1.b. First, let’s learn about the posterior_summary() function, which we’ll use to save a few posterior means.\n\n\nCode\nposterior_summary(fit1.b)\n\n\n                   Estimate   Est.Error          Q2.5         Q97.5\nb_Intercept    3.217323e+01 3.460231038  2.536711e+01  3.898989e+01\nb_body_mass_g  4.466618e-03 0.000925384  2.666726e-03  6.312262e-03\nsigma          2.934212e+00 0.261954441  2.478489e+00  3.501761e+00\nIntercept      4.884751e+01 0.355044833  4.813830e+01  4.953091e+01\nlprior        -4.300398e+00 0.070510527 -4.454670e+00 -4.184566e+00\nlp__          -1.723229e+02 1.258248937 -1.756687e+02 -1.708992e+02\n\n\nCode\nb0    &lt;- posterior_summary(fit1.b)[1, 1]\nb1    &lt;- posterior_summary(fit1.b)[2, 1]\nsigma &lt;- posterior_summary(fit1.b)[3, 1]\n\n\nNow we plot.\n\n\nCode\ncrossing(body_mass_g    = seq(from = 2500, to = 5000, length.out = 200),\n         bill_length_mm = seq(from = 35, to = 60, length.out = 200))  %&gt;% \n  mutate(density = dnorm(x = bill_length_mm, \n                         mean = b0 + b1 * body_mass_g,\n                         sd = sigma)) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_raster(aes(fill = density),\n              interpolate = TRUE) +\n  geom_point(data = chinstrap,\n             shape = 21, color = \"white\", fill = \"black\", stroke = 1/4) +\n  scale_fill_viridis_c(option = \"A\", begin = .15, limits = c(0, NA)) +\n  coord_cartesian(xlim = range(chinstrap$body_mass_g),\n                  ylim = range(chinstrap$bill_length_mm))\n\n\n\n\n\n\n\n\n\nOur univariable model fit1.b can be viewed as something like a 3-dimensional Gaussian hill.\n\n\nPrior distributions & Prior predictive distributions.\nLet’s hold off on this for a bit.\n\n\nParameter distributions.\nUp above, we plotted the posterior distributions for our intercept-only fit0.b model. Here they are again.\n\n\nCode\ndraws %&gt;% \n  rename(`beta[0]==mu` = b_Intercept) %&gt;% \n  pivot_longer(`beta[0]==mu`:sigma, names_to = \"parameter\") %&gt;% \n  \n  ggplot(aes(x = value)) +\n  stat_halfeye(.width = .99, normalize = \"panels\",\n               # customize some of the aesthetics\n               fill = \"lightskyblue1\", color = \"royalblue\", \n               point_color = \"darkorchid4\", point_size = 4, shape = 15) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"fit0.b\",\n       subtitle = \"This time we used 99% intervals, and got silly with the colors.\",\n       x = \"parameter space\") +\n  facet_wrap(~ parameter, scales = \"free\", labeller = label_parsed)\n\n\n\n\n\n\n\n\n\nWe might practice making a similar plot for our univariable model fit1.b.\n\n\nCode\nas_draws_df(fit1.b) %&gt;% \n  rename(`beta[0]` = b_Intercept,\n         `beta[1]` = b_body_mass_g) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  \n  ggplot(aes(x = value)) +\n  stat_histinterval(.width = .95, normalize = \"panels\") +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"fit1.b\",\n       subtitle = \"Using good old 95% intervals, but switching to histograms\",\n       x = \"parameter space\") +\n  facet_wrap(~ parameter, scales = \"free\", labeller = label_parsed)\n\n\n\n\n\n\n\n\n\nSome authors, like John Kruschke, have a strong preference for plotting their posteriors with histograms, rather than density plots."
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#distributions-of-the-model-expectations.",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#distributions-of-the-model-expectations.",
    "title": "Lab: Bayes_Lab_2",
    "section": "Distributions of the model expectations.",
    "text": "Distributions of the model expectations.\nTake another look at the conditional_effects() plot from earlier.\n\n\nCode\nconditional_effects(fit1.b) %&gt;% \n  plot(points = TRUE)\n\n\n\n\n\n\n\n\n\nThe blue line is the posterior mean, for the \\(\\mu_i\\), the model-based mean for bill_length_mm, given the value for the predictor body_mass_g. The semitransparent gray ribbon marks the percentile-based interval for the conditional mean.\nWe can make a similar plot with the fitted() function. First we’ll need a predictor grid, we’ll call nd.\n\n\nCode\nnd &lt;- tibble(body_mass_g = seq(\n  from = min(chinstrap$body_mass_g),\n  to = max(chinstrap$body_mass_g),\n  length.out = 100))\n\nglimpse(nd)\n\n\nRows: 100\nColumns: 1\n$ body_mass_g &lt;dbl&gt; 2700.000, 2721.212, 2742.424, 2763.636, 2784.848, 2806.061…\n\n\nNow pump nd into the fitted() function.\n\n\nCode\nfitted(fit1.b, newdata = nd) %&gt;% \n  # subset the first 6 rows\n  head()\n\n\n     Estimate Est.Error     Q2.5    Q97.5\n[1,] 44.23310 1.0079706 42.24422 46.24041\n[2,] 44.32785 0.9896217 42.37700 46.29951\n[3,] 44.42259 0.9713230 42.51467 46.35163\n[4,] 44.51734 0.9530772 42.65479 46.40389\n[5,] 44.61208 0.9348874 42.78800 46.45607\n[6,] 44.70683 0.9167571 42.91905 46.52392\n\n\nNow plot.\n\n\nCode\nfitted(fit1.b, newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  ggplot(aes(x = body_mass_g)) +\n  geom_ribbon(aes(ymin = Q2.5, ymax = Q97.5),\n              alpha = 1/3) +\n  geom_line(aes(y = Estimate)) +\n  # add the data\n  geom_point(data = chinstrap,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\n\nLook what happens if we augment the probs argument in fitted().\n\n\nCode\nfitted(fit1.b, \n       newdata = nd,\n       probs = c(.025, .975, .25, .75)) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  ggplot(aes(x = body_mass_g)) +\n  # 95% range\n  geom_ribbon(aes(ymin = Q2.5, ymax = Q97.5),\n              alpha = 1/4) +\n  # 50% range\n  geom_ribbon(aes(ymin = Q25, ymax = Q75),\n              alpha = 1/4) +\n  geom_line(aes(y = Estimate)) +\n  geom_point(data = chinstrap,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\n\nNow look what happens if we set summary = FALSE.\n\n\nCode\nfitted(fit1.b, \n       newdata = nd,\n       summary = FALSE) %&gt;% \n  str()\n\n\n num [1:4000, 1:100] 43.9 43.2 41.7 45 43.4 ...\n\n\nWe get full 4,000 draw posterior distributions for each of the 100 levels of the predictor body_mass_g. Now look at what happens if we wrangle that output a little, and plot with aid from stat_lineribbon() from the ggdist package.\n\n\nCode\nfitted(fit1.b, \n       newdata = nd,\n       summary = F) %&gt;% \n  data.frame() %&gt;% \n  set_names(pull(nd, body_mass_g)) %&gt;% \n  mutate(draw = 1:n()) %&gt;% \n  pivot_longer(-draw) %&gt;% \n  mutate(body_mass_g = as.double(name)) %&gt;%\n  \n  ggplot(aes(x = body_mass_g, y = value)) +\n  stat_lineribbon() +\n  scale_fill_brewer() +\n  coord_cartesian(ylim = range(chinstrap$bill_length_mm)) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nLook what happens when we request more intervals in the .width argument.\n\n\nCode\nfitted(fit1.b, \n       newdata = nd,\n       summary = F) %&gt;% \n  data.frame() %&gt;% \n  set_names(pull(nd, body_mass_g)) %&gt;% \n  mutate(draw = 1:n()) %&gt;% \n  pivot_longer(-draw) %&gt;% \n  mutate(body_mass_g = as.double(name)) %&gt;%\n  \n  ggplot(aes(x = body_mass_g, y = value)) +\n  # make more ribbons\n  stat_lineribbon(.width = c(.1, .2, .3, .4, .5, .6, .7, .8, .9),\n                  # remove the line\n                  linewidth = 0) +\n  scale_fill_brewer() +\n  coord_cartesian(ylim = range(chinstrap$bill_length_mm)) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nThe conditional mean, \\(\\mu_i\\), has its own distribution. We can take this visualization approach even further to make a color gradient.\n\n\nCode\nfitted(fit1.b, \n       newdata = nd,\n       summary = F) %&gt;% \n  data.frame() %&gt;% \n  set_names(pull(nd, body_mass_g)) %&gt;% \n  mutate(draw = 1:n()) %&gt;% \n  pivot_longer(-draw) %&gt;% \n  mutate(body_mass_g = as.double(name)) %&gt;%\n  \n  ggplot(aes(x = body_mass_g, y = value, fill = after_stat(.width))) +\n  # make more ribbons\n  stat_lineribbon(.width = ppoints(50)) +\n  scale_fill_distiller(limits = 0:1) +\n  coord_cartesian(ylim = range(chinstrap$bill_length_mm)) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\nFor technical details on this visualization approach, go here: https://mjskay.github.io/ggdist/articles/lineribbon.html#lineribbon-gradients.\nThe ggdist package even has an experimental visualization approach that’s based on density gradients, rather than interval-width gradients. Since this is experimental, I’m not going to go into the details. But if you’re curious and adventurous, you can learn more here: https://mjskay.github.io/ggdist/articles/lineribbon.html#lineribbon-density-gradients.\n\nPosterior-predictive distributions.\nThe last section showed the posterior distributions for the model expectations (i.e., the conditional means). In the context of the Gaussian distribution, that’s \\(\\mu\\), or \\(\\mu_i\\) in the case of the univariable model fit1.b. But the whole Gaussian distribution includes \\(\\mu\\) and \\(\\sigma\\).\nThis is where the predict() function comes in. First, we compare the fitted() output to predict().\n\n\nCode\nfitted(fit1.b, newdata = nd) %&gt;% \n  # subset the first 6 rows\n  head()\n\n\n     Estimate Est.Error     Q2.5    Q97.5\n[1,] 44.23310 1.0079706 42.24422 46.24041\n[2,] 44.32785 0.9896217 42.37700 46.29951\n[3,] 44.42259 0.9713230 42.51467 46.35163\n[4,] 44.51734 0.9530772 42.65479 46.40389\n[5,] 44.61208 0.9348874 42.78800 46.45607\n[6,] 44.70683 0.9167571 42.91905 46.52392\n\n\nCode\npredict(fit1.b, newdata = nd) %&gt;% \n  # subset the first 6 rows\n  head()\n\n\n     Estimate Est.Error     Q2.5    Q97.5\n[1,] 44.27184  3.112532 38.11578 50.25957\n[2,] 44.37165  3.125233 38.12058 50.44919\n[3,] 44.41703  3.094976 38.50962 50.57118\n[4,] 44.49376  3.081426 38.36049 50.49796\n[5,] 44.63676  3.090296 38.46251 50.76884\n[6,] 44.75065  3.075866 38.61483 50.84024\n\n\nThe posterior means (Estimate) are about the same, but the SD’s (Est.Error) are much larger in the predict() output, and the widths of the 95% intervals are too. Let’s make a plot.\n\n\nCode\npredict(fit1.b, newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  ggplot(aes(x = body_mass_g)) +\n  geom_ribbon(aes(ymin = Q2.5, ymax = Q97.5),\n              alpha = 1/3) +\n  geom_line(aes(y = Estimate)) +\n  # add the data\n  geom_point(data = chinstrap,\n             aes(y = bill_length_mm)) +\n  coord_cartesian(ylim = range(chinstrap$bill_length_mm))\n\n\n\n\n\n\n\n\n\nThe gray band is the 95% interval for the entire posterior predictive distribution, not just the mean. In a good model, about 95% of the data points should be within those bands.\nDiscuss how the jagged lines have to do with the uncertainty in \\(\\sigma\\).\nIf we wanted to, we could integrate the fitted()-based conditional posterior mean, with the predict()-based posterior-predictive distribution.\n\n\nCode\n# save the fitted() results\nf &lt;- fitted(fit1.b, newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) \n\npredict(fit1.b, newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  \n  ggplot(aes(x = body_mass_g)) +\n  # 95% posterior-predictive range\n  geom_ribbon(aes(ymin = Q2.5, ymax = Q97.5),\n              alpha = 1/4) +\n  # 95% conditional mean range\n  geom_ribbon(data = f,\n              aes(ymin = Q2.5, ymax = Q97.5),\n              alpha = 1/4) +\n  # posterior mean of the conditional mean\n  geom_line(data = f,\n            aes(y = Estimate)) +\n  # original data\n  geom_point(data = chinstrap,\n             aes(y = bill_length_mm)) +\n  coord_cartesian(ylim = range(chinstrap$bill_length_mm))\n\n\n\n\n\n\n\n\n\nIt’s the posterior predictive distribution that we use to predict new data points. For example, here’s what happens if we use predict() without the newdata argument.\n\n\nCode\npredict(fit1.b) %&gt;% \n  head()\n\n\n     Estimate Est.Error     Q2.5    Q97.5\n[1,] 47.75351  3.002885 42.05586 53.62070\n[2,] 49.53782  2.937910 43.79139 55.28441\n[3,] 48.38029  3.001341 42.38645 54.22588\n[4,] 47.91471  3.004663 41.96078 53.87637\n[5,] 48.79252  3.005188 42.87218 54.53226\n[6,] 49.66407  2.943077 43.78867 55.29868\n\n\nWe get posterior predictive summaries for each of the original data points. Here’s what happens if we set summary = FALSE.\n\n\nCode\npredict(fit1.b, summary = FALSE) %&gt;% \n  str()\n\n\n num [1:4000, 1:68] 41.3 42.1 49.1 46.6 43.8 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : NULL\n\n\nThis time, we got 4,000 posterior draws for each. We can reduce that output with the ndraws argument.\n\n\nCode\npredict(fit1.b, summary = FALSE, ndraws = 6) %&gt;% \n  str()\n\n\n num [1:6, 1:68] 48.6 48 46.1 41.5 47.5 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : NULL\n\n\nNow wrangle and plot.\n\n\nCode\nset.seed(1)\n\npredict(fit1.b, summary = FALSE, ndraws = 6) %&gt;% \n  data.frame() %&gt;% \n  mutate(draw = 1:n()) %&gt;% \n  pivot_longer(-draw) %&gt;% \n  mutate(row = str_remove(name, \"X\") %&gt;% as.double()) %&gt;% \n  left_join(chinstrap %&gt;% \n              mutate(row = 1:n()),\n            by = join_by(row)) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = value)) + \n  geom_point() +\n  ylab(\"bill_length_mm\") +\n  facet_wrap(~ draw, labeller = label_both)\n\n\n\n\n\n\n\n\n\nWith predict(), we can use the entire posterior-predictive distribution to simulate new data based on the values of our predictor variable(s). To give you a better sense of what’s happening under the hood, here’s an as_draws_df() based alternative.\n\n\nCode\nset.seed(1)\n\n# walk this code through\nas_draws_df(fit1.b) %&gt;% \n  rename(beta0 = b_Intercept,\n         beta1 = b_body_mass_g) %&gt;% \n  select(.draw, beta0, beta1, sigma) %&gt;% \n  slice_sample(n = 6) %&gt;% \n  expand_grid(chinstrap %&gt;% select(body_mass_g)) %&gt;% \n  mutate(bill_length_mm = rnorm(n = n(),\n                                mean = beta0 + beta1 * body_mass_g,\n                                sd = sigma)) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) + \n  geom_point() +\n  facet_wrap(~ .draw, labeller = label_both)\n\n\n\n\n\n\n\n\n\nNow take a look at what happens when we plot the densities of several simulated draws.\n\n\nCode\nset.seed(1)\n\nas_draws_df(fit1.b) %&gt;% \n  rename(beta0 = b_Intercept,\n         beta1 = b_body_mass_g) %&gt;% \n  select(.draw, beta0, beta1, sigma) %&gt;% \n  slice_sample(n = 50) %&gt;%  # increase the number of random draws\n  expand_grid(chinstrap %&gt;% select(body_mass_g)) %&gt;% \n  mutate(bill_length_mm = rnorm(n = n(),\n                                mean = beta0 + beta1 * body_mass_g,\n                                sd = sigma)) %&gt;% \n  \n  ggplot(aes(x = bill_length_mm, group = .draw)) + \n  geom_density(size = 1/4, color = alpha(\"black\", 1/2)) +\n  coord_cartesian(xlim = range(chinstrap$bill_length_mm) + c(-2, 2))\n\n\n\n\n\n\n\n\n\nThe similarities and differences among the individual density lines give you a sense of the (un)certainty of the posterior-predictive distribution.\nThis may be a good time for you to work on Exercise 1 (see end of the document)\n#Part 4: Beginning to look at priors"
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#bayes-rule",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#bayes-rule",
    "title": "Lab: Bayes_Lab_2",
    "section": "Bayes’ rule",
    "text": "Bayes’ rule\nBayes’ theorem will allow us to determine the plausibility of various values of our parameter(s) of interest, \\(\\theta\\), given the data \\(d\\), which we can express formally as \\(\\Pr(\\theta \\mid d)\\). Bayes’ rule takes on the form\n\\[\n\\Pr(\\theta \\mid d) = \\frac{\\Pr(d \\mid \\theta) \\Pr(\\theta)}{\\Pr(d)}.\n\\]\nwhere\n\n\\(\\Pr(d \\mid \\theta)\\) is the likelihood,\n\\(\\Pr(\\theta)\\) is the prior,\n\\(\\Pr(d)\\) is the average probability of the data, and\n\\(\\Pr(\\theta \\mid d)\\) is the posterior.\n\nWe can express this in words as\n\\[\n\\text{Posterior} = \\frac{\\text{Probability of the data} \\times \\text{Prior}}{\\text{Average probability of the data}}.\n\\]\nThe denominator \\(\\Pr(d)\\) is a normalizing constant, and dividing by this constant is what converts the posterior \\(\\Pr(\\theta \\mid d)\\) into a probability metric."
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#default-priors",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#default-priors",
    "title": "Lab: Bayes_Lab_2",
    "section": "Default priors",
    "text": "Default priors\nTo set your priors with brms, the brm() function has a prior argument. If you don’t explicitly use the prior argument, brm() will use default priors. This is what happened with our fit1.b model from above. We used default priors. If you’d like to see what those priors are, execute fit1.b$prior.\n\n\nCode\n# maybe show str(fit1.b)\nfit1.b$prior\n\n\n                   prior     class        coef group resp dpar nlpar lb ub\n                  (flat)         b                                        \n                  (flat)         b body_mass_g                            \n student_t(3, 49.5, 3.6) Intercept                                        \n    student_t(3, 0, 3.6)     sigma                                    0   \n       source\n      default\n (vectorized)\n      default\n      default\n\n\nThus, a fuller expression of our model is\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 \\text{body\\_mass\\_g}_i \\\\\n\\beta_0 & \\sim \\operatorname{Student-t}(3, 49.5, 3.6) \\\\\n\\beta_1 & \\sim \\operatorname{Uniform}(-\\infty, \\infty) \\\\\n\\sigma & \\sim \\operatorname{Student-t}^+(3, 0, 3.6).\n\\end{aligned}\n\\]\nIf we had wanted to see the brm() defaults before fitting the model, we could have used the get_prior() function.\n\n\nCode\nget_prior(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n\n                   prior     class        coef group resp dpar nlpar lb ub\n                  (flat)         b                                        \n                  (flat)         b body_mass_g                            \n student_t(3, 49.5, 3.6) Intercept                                        \n    student_t(3, 0, 3.6)     sigma                                    0   \n       source\n      default\n (vectorized)\n      default\n      default\n\n\nIf you recall, the normal distribution is a member of the Student-t family, where the \\(\\nu\\) (aka degrees of freedom or normality parameter) is set to \\(\\infty\\). To give you a sense, here are the densities of three members of the Student-t family, with varying \\(\\nu\\) values.\n\n\nCode\ncrossing(theta = seq(from = -4.5, to = 4.5, length.out = 200),\n         nu = c(3, 10, Inf)) %&gt;% \n  mutate(density = dt(x = theta, df = nu)) %&gt;% \n  \n  ggplot(aes(x = theta, y = density, color = factor(nu))) +\n  geom_line(linewidth = 1) +\n  scale_color_viridis_d(expression(nu), option = \"A\", end = .7) +\n  labs(title = \"3 members of the Student-t family\",\n       x = expression(theta)) +\n  coord_cartesian(xlim = c(-4, 4))\n\n\n\n\n\n\n\n\n\nThus, Student-t distributions have thicker tails when they have smaller \\(\\nu\\) parameters. In the case where \\(\\nu = 3\\), the tails are pretty thick, which means they are more tolerant of more extreme values. And thus priors with small-\\(\\nu\\) parameters will be weaker (i.e., more permissive) than their Gaussian counterparts.\nWe can visualize functions from ggdist to visualize the default brm() priors. We’ll start with the student_t(3, 49.5, 3.6) \\(\\beta_0\\) prior, and also take the opportunity to compare that with a slightly stronger normal(49.5, 3.6) alternative.\n\n\nCode\nc(prior(student_t(3, 49.5, 3.6)),\n  prior(normal(49.5, 3.6))) %&gt;% \n  parse_dist() %&gt;% \n  \n  ggplot(aes(xdist = .dist_obj, y = prior)) + \n  stat_halfeye() +\n  labs(x = expression(italic(p)(beta[0])),\n       y = NULL) +\n  coord_cartesian(xlim = c(25, 75))\n\n\n\n\n\n\n\n\n\nSee how that \\(n = 3\\) parameter in the default prior let do much thicker tails than it’s Gaussian counterpart. We can make the same kind of plot for our default \\(\\sigma\\) prior and its half-Gaussian counterpart.\n\n\nCode\nc(prior(student_t(3, 0, 3.6), lb = 0),  # note our use of the lb = 0 argument\n  prior(normal(0, 3.6), lb = 0)) %&gt;% \n  parse_dist() %&gt;% \n  \n  ggplot(aes(xdist = .dist_obj, y = prior)) + \n  stat_halfeye(point_interval = mean_qi, .width = c(.90, .99)) +\n  labs(x = expression(italic(p)(sigma)),\n       y = NULL) +\n  coord_cartesian(xlim = c(0, 30))\n\n\n\n\n\n\n\n\n\nHere’s how we could have explicitly set our priors by hand.\n\n\nCode\nfit2.b &lt;- brm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g,\n  prior = prior(student_t(3, 49.5, 3.6), class = Intercept) +\n    prior(student_t(3, 0, 3.6), class = sigma, lb = 0)\n)\n\n\nCompare the results.\n\n\nCode\nsummary(fit1.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.17      3.46    25.37    38.99 1.00     4643     3271\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     4628     3211\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.93      0.26     2.48     3.50 1.00     1956     1927\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nCode\nsummary(fit2.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.23      3.58    25.44    39.20 1.00     5050     2927\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     5054     2899\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.92      0.25     2.47     3.45 1.00     2345     2100\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1)."
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#question-2-are-the-priors-the-same-what-do-you-think-is-going-on",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#question-2-are-the-priors-the-same-what-do-you-think-is-going-on",
    "title": "Lab: Bayes_Lab_2",
    "section": "QUESTION 2 Are the priors the same? What do you think is going on?",
    "text": "QUESTION 2 Are the priors the same? What do you think is going on?\n\n\nCode\nfit1.b$prior\n\n\n                   prior     class        coef group resp dpar nlpar lb ub\n                  (flat)         b                                        \n                  (flat)         b body_mass_g                            \n student_t(3, 49.5, 3.6) Intercept                                        \n    student_t(3, 0, 3.6)     sigma                                    0   \n       source\n      default\n (vectorized)\n      default\n      default\n\n\nCode\nfit2.b$prior\n\n\n                   prior     class        coef group resp dpar nlpar lb ub\n                  (flat)         b                                        \n                  (flat)         b body_mass_g                            \n student_t(3, 49.5, 3.6) Intercept                                        \n    student_t(3, 0, 3.6)     sigma                                    0   \n       source\n      default\n (vectorized)\n         user\n         user\n\n\n\nAnswer:\nThe priors seem to be the same between these two models. For model 1, all three priors are by default. For model 2, we are specifying the priors for the intercept and for sigma, while we are still using the default prior for the slope.\nIf you want to learn more about the default prior settings for brms, read through the set_prior section of the brms reference manual (https://CRAN.R-project.org/package=brms/brms.pdf)."
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#references",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#references",
    "title": "Lab: Bayes_Lab_2",
    "section": "References",
    "text": "References\nKruschke, J. K. (2015). Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan. Academic Press. https://sites.google.com/site/doingbayesiandataanalysis/"
  },
  {
    "objectID": "posts/04-09 Bayes 2/Bayes_Lab_2.html#session-information",
    "href": "posts/04-09 Bayes 2/Bayes_Lab_2.html#session-information",
    "title": "Lab: Bayes_Lab_2",
    "section": "Session information",
    "text": "Session information"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Labs & Assignments",
    "section": "",
    "text": "Missing_Data_Lab\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPSY 504: Bayes Lab 3_2, HMC Diagnostics\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 16, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nPSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 16, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Bayes_Lab_2\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 9, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Bayes_Lab_2\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 9, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Bayes and Penguins\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 2, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nBayesian GLM\n\n\n \n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 31, 2025\n\n\nKen Wang\n\n\n\n\n\n\n\n\n\n\n\n\nLab: MLM2 - Answer Walkthrough\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 26, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Intro to MLM Exercise/Walkthrough\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 19, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Poisson Regression\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nMar 5, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Multinomial Regression\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 26, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Ordinal Regression\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 19, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Logistic Regression\n\n\nPrinceton University\n\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nFeb 12, 2025\n\n\nKW\n\n\n\n\n\n\n\n\n\n\n\n\nMillie\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nFeb 6, 2025\n\n\nKW\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html",
    "title": "Lab: Bayes and Penguins",
    "section": "",
    "text": "Here is a worksheet and assignment that combines Bayes (brms) with tidyverse tools. The focus is on the essentials when it comes to simple linear regression with brms.\nPlease read and run through this worksheet and answer the conceptual questions that are interleaved within them. At the end of each part, is a coding exercise based on the material you’ve read until then."
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#packages-and-data",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#packages-and-data",
    "title": "Lab: Bayes and Penguins",
    "section": "Packages and data",
    "text": "Packages and data\nLoad the primary packages.\n\n\nCode\nlibrary(tidyverse)\nlibrary(ggside)\nlibrary(brms)\nlibrary(broom)\nlibrary(broom.mixed)\n\n\nWe’ll use the penguins data set from the palmerpenguins package.\n\n\nCode\ndata(penguins, package = \"palmerpenguins\")\n\n# Any type of looking at data is a part of EDA \nglimpse(penguins)\n\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nCode\nhead(penguins)\n\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nYou might divide the data set by the three levels of species.\n\n\nCode\npenguins %&gt;% \n  count(species)\n\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\nTo start, we’ll make a subset of the data called chinstrap.\n\n\nCode\nchinstrap &lt;- penguins %&gt;% \n  filter(species == \"Chinstrap\")\n\nglimpse(chinstrap)\n\n\nRows: 68\nColumns: 8\n$ species           &lt;fct&gt; Chinstrap, Chinstrap, Chinstrap, Chinstrap, Chinstra…\n$ island            &lt;fct&gt; Dream, Dream, Dream, Dream, Dream, Dream, Dream, Dre…\n$ bill_length_mm    &lt;dbl&gt; 46.5, 50.0, 51.3, 45.4, 52.7, 45.2, 46.1, 51.3, 46.0…\n$ bill_depth_mm     &lt;dbl&gt; 17.9, 19.5, 19.2, 18.7, 19.8, 17.8, 18.2, 18.2, 18.9…\n$ flipper_length_mm &lt;int&gt; 192, 196, 193, 188, 197, 198, 178, 197, 195, 198, 19…\n$ body_mass_g       &lt;int&gt; 3500, 3900, 3650, 3525, 3725, 3950, 3250, 3750, 4150…\n$ sex               &lt;fct&gt; female, male, male, female, male, female, female, ma…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…\n\n\nWe’ve done from a full data set with \\(N = 344\\) rows, to a subset with \\(n = 68\\) rows. (“$” signs hold LaTex snippets)"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#more-exploratory-data-analysis-eda",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#more-exploratory-data-analysis-eda",
    "title": "Lab: Bayes and Penguins",
    "section": "More Exploratory data analysis (EDA)",
    "text": "More Exploratory data analysis (EDA)\nOur focal variables will be body_mass_g and bill_length_mm. Here they are in a scatter plot.\n\n\nCode\nchinstrap %&gt;% \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE)\n\n\n\n\n\n\n\n\n\nWe can augment the plot with some nice functions from the ggside package.\n\n\nCode\nchinstrap %&gt;% \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n  # from ggside\n  geom_xsidehistogram(bins = 30) +\n  geom_ysidehistogram(bins = 30) +\n  scale_xsidey_continuous(breaks = NULL) +\n  scale_ysidex_continuous(breaks = NULL) +\n  theme(ggside.panel.scale = 0.25)\n\n\n\n\n\n\n\n\n\nIt’s a good idea to get a sense of the sample statistics. Here are the means and SD’s for the two variables.\n\n\nCode\nchinstrap %&gt;% \n  summarise(body_mass_g_mean = mean(body_mass_g),\n            body_mass_g_sd = sd(body_mass_g),\n            bill_length_mm_mean = mean(bill_length_mm),\n            bill_length_mm_sd = sd(bill_length_mm)) \n\n\n# A tibble: 1 × 4\n  body_mass_g_mean body_mass_g_sd bill_length_mm_mean bill_length_mm_sd\n             &lt;dbl&gt;          &lt;dbl&gt;               &lt;dbl&gt;             &lt;dbl&gt;\n1            3733.           384.                48.8              3.34\n\n\nAnd you know that more efficient way to compute sample statistics for multiple variables is to first convert the data into the long format with pivot_longer(). Then you use a group_by() line before the main event in summarise().\n\n\nCode\nchinstrap %&gt;% \n  pivot_longer(cols = c(body_mass_g, bill_length_mm)) %&gt;% \n  group_by(name) %&gt;% \n  summarise(mean = mean(value),\n            sd = sd(value),\n            # count the missing data (if any)\n            n_missing = sum(is.na(value))) \n\n\n# A tibble: 2 × 4\n  name             mean     sd n_missing\n  &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;     &lt;int&gt;\n1 bill_length_mm   48.8   3.34         0\n2 body_mass_g    3733.  384.           0\n\n\n\nQuestion 1.1: What do the marginal histograms added by ggside tell you about the distribution of body_mass_g and bill_length_mm individually?\nThe distribution of body_mass_g and bill_length_mm are probably not gaussian. They both look kinda bimodal."
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#ols",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#ols",
    "title": "Lab: Bayes and Penguins",
    "section": "OLS",
    "text": "OLS\nWe’ll fit the model\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}\\_i &= \\beta_0 + \\beta_1 \\text{body\\_mass\\_g}\\_i + \\epsilon_i \\\\\n\\epsilon_i &\\sim \\operatorname{Normal}(0, \\sigma\\_\\epsilon) \\\\\n\\end{aligned}\n\\]\nwhere bill_length_mm is the dependent variable or a response variable. The sole predictor is body_mass_g. Both variables have \\(i\\) subscripts, which indicate they vary across the \\(i\\) rows in the data set. For now, you might think if \\(i\\) as standing for “index.” The last term in the first line, \\(\\epsilon\\), is often called the error, or noise term. In the second line, we see we’re making the conventional assumption the “errors” are normally distributed around the regression line.\nAn alternative and equivalent way to write that equation is\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}_i &\\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i &= \\beta_0 + \\beta_1 \\text{body\\_mass\\_g}_i\n\\end{aligned}\n\\]\nwhich is meant to convey we are modeling bill_length_mm as normally distributed, with a conditional mean. You don’t tend to see equations written this way in the OLS paradigm. However, this style of notation will serve us better when we start modeling our data with other distributions.\nThis notation grows on you\nFitting the model with the base R lm() function, which uses the OLS algorithm.\n\n\nCode\n# fit\nfit1.ols &lt;- lm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n# summarize the results\nsummary(fit1.ols)\n\n\n\nCall:\nlm(formula = bill_length_mm ~ 1 + body_mass_g, data = chinstrap)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.8399 -2.2370  0.3247  1.8385  9.3138 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 3.217e+01  3.443e+00   9.344 1.07e-13 ***\nbody_mass_g 4.463e-03  9.176e-04   4.863 7.48e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.887 on 66 degrees of freedom\nMultiple R-squared:  0.2638,    Adjusted R-squared:  0.2527 \nF-statistic: 23.65 on 1 and 66 DF,  p-value: 7.48e-06\n\n\nThe point estimates are in scientific notation. We can pull them with the coef() function.\n\n\nCode\ncoef(fit1.ols)\n\n\n (Intercept)  body_mass_g \n32.174192865  0.004462694 \n\n\nWe can compute fitted values, or predictions, with the predict() function. Here’s the default behavior.\n\n\nCode\npredict(fit1.ols)\n\n\n       1        2        3        4        5        6        7        8 \n47.79362 49.57870 48.46303 47.90519 48.79773 49.80183 46.67795 48.90930 \n       9       10       11       12       13       14       15       16 \n50.69437 48.68616 49.13243 49.02086 48.68616 50.24810 48.12832 50.24810 \n      17       18       19       20       21       22       23       24 \n46.90108 48.68616 47.57049 51.81005 48.23989 47.34735 45.11601 49.13243 \n      25       26       27       28       29       30       31       32 \n46.90108 50.69437 47.34735 49.13243 48.68616 52.47945 46.45481 51.36378 \n      33       34       35       36       37       38       39       40 \n47.12422 50.47124 48.23989 49.57870 49.35556 53.59512 44.22347 52.25632 \n      41       42       43       44       45       46       47       48 \n49.80183 48.46303 48.01676 47.79362 48.57459 52.03318 47.34735 51.36378 \n      49       50       51       52       53       54       55       56 \n46.67795 48.57459 47.01265 49.80183 48.23989 50.24810 47.12422 47.57049 \n      57       58       59       60       61       62       63       64 \n46.67795 50.24810 49.13243 47.90519 49.80183 48.46303 48.46303 50.02497 \n      65       66       67       68 \n47.34735 49.02086 50.47124 49.02086 \n\n\nWe get one prediction, one fitted value, for each case in the data set. We can express the uncertainty around those predictions with confidence intervals.\n\n\nCode\npredict(fit1.ols,\n        interval = \"confidence\") %&gt;% \n  # just the top 6\n  head()\n\n\n       fit      lwr      upr\n1 47.79362 46.97456 48.61268\n2 49.57870 48.81580 50.34160\n3 48.46303 47.74771 49.17834\n4 47.90519 47.10905 48.70133\n5 48.79773 48.09864 49.49682\n6 49.80183 48.99783 50.60584\n\n\nWe might also ask for a standard error for each prediction.\n\n\nCode\npredict(fit1.ols,\n        se.fit = TRUE) %&gt;% \n  data.frame()\n\n\n        fit    se.fit df residual.scale\n1  47.79362 0.4102359 66       2.886728\n2  49.57870 0.3821060 66       2.886728\n3  48.46303 0.3582736 66       2.886728\n4  47.90519 0.3987564 66       2.886728\n5  48.79773 0.3501459 66       2.886728\n6  49.80183 0.4026961 66       2.886728\n7  46.67795 0.5648454 66       2.886728\n8  48.90930 0.3504110 66       2.886728\n9  50.69437 0.5185569 66       2.886728\n10 48.68616 0.3513814 66       2.886728\n11 49.13243 0.3554108 66       2.886728\n12 49.02086 0.3521734 66       2.886728\n13 48.68616 0.3513814 66       2.886728\n14 50.24810 0.4550963 66       2.886728\n15 48.12832 0.3789333 66       2.886728\n16 50.24810 0.4550963 66       2.886728\n17 46.90108 0.5296025 66       2.886728\n18 48.68616 0.3513814 66       2.886728\n19 47.57049 0.4359183 66       2.886728\n20 51.81005 0.7050167 66       2.886728\n21 48.23989 0.3707575 66       2.886728\n22 47.34735 0.4647215 66       2.886728\n23 45.11601 0.8407923 66       2.886728\n24 49.13243 0.3554108 66       2.886728\n25 46.90108 0.5296025 66       2.886728\n26 50.69437 0.5185569 66       2.886728\n27 47.34735 0.4647215 66       2.886728\n28 49.13243 0.3554108 66       2.886728\n29 48.68616 0.3513814 66       2.886728\n30 52.47945 0.8273195 66       2.886728\n31 46.45481 0.6015246 66       2.886728\n32 51.36378 0.6270243 66       2.886728\n33 47.12422 0.4961023 66       2.886728\n34 50.47124 0.4856973 66       2.886728\n35 48.23989 0.3707575 66       2.886728\n36 49.57870 0.3821060 66       2.886728\n37 49.35556 0.3661365 66       2.886728\n38 53.59512 1.0397147 66       2.886728\n39 44.22347 1.0105441 66       2.886728\n40 52.25632 0.7859885 66       2.886728\n41 49.80183 0.4026961 66       2.886728\n42 48.46303 0.3582736 66       2.886728\n43 48.01676 0.3882941 66       2.886728\n44 47.79362 0.4102359 66       2.886728\n45 48.57459 0.3541019 66       2.886728\n46 52.03318 0.7451900 66       2.886728\n47 47.34735 0.4647215 66       2.886728\n48 51.36378 0.6270243 66       2.886728\n49 46.67795 0.5648454 66       2.886728\n50 48.57459 0.3541019 66       2.886728\n51 47.01265 0.5126128 66       2.886728\n52 49.80183 0.4026961 66       2.886728\n53 48.23989 0.3707575 66       2.886728\n54 50.24810 0.4550963 66       2.886728\n55 47.12422 0.4961023 66       2.886728\n56 47.57049 0.4359183 66       2.886728\n57 46.67795 0.5648454 66       2.886728\n58 50.24810 0.4550963 66       2.886728\n59 49.13243 0.3554108 66       2.886728\n60 47.90519 0.3987564 66       2.886728\n61 49.80183 0.4026961 66       2.886728\n62 48.46303 0.3582736 66       2.886728\n63 48.46303 0.3582736 66       2.886728\n64 50.02497 0.4272392 66       2.886728\n65 47.34735 0.4647215 66       2.886728\n66 49.02086 0.3521734 66       2.886728\n67 50.47124 0.4856973 66       2.886728\n68 49.02086 0.3521734 66       2.886728\n\n\nInstead of relying on predictions from the values in the data, we might instead define a sequence of values from the predictor variable. We’ll call those nd.\n\n\nCode\nnd &lt;- tibble(body_mass_g = seq(from = min(chinstrap$body_mass_g),\n                               to = max(chinstrap$body_mass_g),\n                               length.out = 50))\n\nglimpse(nd)\n\n\nRows: 50\nColumns: 1\n$ body_mass_g &lt;dbl&gt; 2700.000, 2742.857, 2785.714, 2828.571, 2871.429, 2914.286…\n\n\nWe can insert our nd data into the newdata argument.\n\n\nCode\npredict(fit1.ols,\n        interval = \"confidence\",\n        newdata = nd) %&gt;% \n  # just the top 6\n  head()\n\n\n       fit      lwr      upr\n1 44.22347 42.20585 46.24108\n2 44.41473 42.47057 46.35888\n3 44.60598 42.73489 46.47708\n4 44.79724 42.99874 46.59574\n5 44.98850 43.26207 46.71493\n6 45.17976 43.52482 46.83469\n\n\nNow we wrangle those predictions a bit and pump the results right into ggplot().\n\n\nCode\npredict(fit1.ols,\n        interval = \"confidence\",\n        newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  \n  ggplot(aes(x = body_mass_g)) +\n  # 95% confidence interval ribbon\n  geom_ribbon(aes(ymin = lwr, ymax = upr),\n              alpha = 1/3) +\n  # point estimate line\n  geom_line(aes(y = fit)) +\n  geom_point(data = chinstrap,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\n\nIf we wanted to, we could look at the residuals with help from the residuals() function.\n\n\nCode\nresiduals(fit1.ols)\n\n\n         1          2          3          4          5          6          7 \n-1.2936220  0.4213003  2.8369738 -2.5051894  3.9022718 -4.6018344 -0.5779485 \n         8          9         10         11         12         13         14 \n 2.3907044 -4.6943732  2.6138391 -2.5324303  2.6791371 -1.6861609  1.7518962 \n        15         16         17         18         19         20         21 \n-2.2283241  0.2518962  3.3989168  9.3138391 -1.1704873 -2.6100467 -5.8398915 \n        22         23         24         25         26         27         28 \n 1.1526474 -1.9160056  1.4675697 -0.2010832  1.3056268  3.1526474  0.3675697 \n        29         30         31         32         33         34         35 \n-2.2861609  0.3205492 -5.5548138  2.8362227 -4.6242179  0.5287615  1.4601085 \n        36         37         38         39         40         41         42 \n-2.0786997 -1.7555650 -1.5951243  2.6765332  1.2436839 -0.8018344 -2.2630262 \n        43         44         45         46         47         48         49 \n 2.8832432 -2.2936220  2.3254065 -1.2331814  2.7526474 -2.3637773  4.8220515 \n        50         51         52         53         54         55         56 \n 1.2254065  1.0873494  1.5981656 -2.5398915  0.4518962 -4.6242179  4.6295127 \n        57         58         59         60         61         62         63 \n-1.4779485 -0.9481038  1.0675697 -2.3051894  2.0981656 -1.6630262 -2.7630262 \n        64         65         66         67         68 \n 5.7750309 -3.8473526  0.5791371  0.3287615  1.1791371 \n\n\nHere we might put them in a tibble and display them in a plot.\n\n\nCode\n# put them in a tibble\ntibble(r = residuals(fit1.ols)) %&gt;% \n  # plot!\n  ggplot(aes(x = r)) +\n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\n\n\nQuestion 1.2: Can you predict what the mean value, and standard deviations will be? Why? Calculate it. Compare this against outputs in summary(fit1.ols) and explain. Map the values you find to the latex equations before.\n\n\nCode\n# Slope\nslope = cov(chinstrap$body_mass_g, chinstrap$bill_length_mm) / var(chinstrap$body_mass_g)\nslope\n\n\n[1] 0.004462694\n\n\nCode\nres = residuals(fit1.ols)\nvar_res = sum(res^2) / (length(chinstrap) - 2)\nvar_res / sum((chinstrap$body_mass_g - mean(chinstrap$body_mass_g))^2)\n\n\n[1] 9.262102e-06\n\n\nCode\n# Intercept\nmean(chinstrap$bill_length_mm) - slope * mean(chinstrap$body_mass_g)\n\n\n[1] 32.17419\n\n\nCode\nsd(chinstrap$bill_length_mm)\n\n\n[1] 3.339256\n\n\nThe estimate for the intercept is 32.17 with a standard deviation of 3.40. The standard deviation is not computed from the residuals but the simple SD of the y is a good enough estimate here. Both are pretty close to the estimated value from the model.\n\nThe mean value for the slope is 0.0045 and the standard deviation is 9.26e-06. These are quite similar to the values from our ols model.\n\\[\n\\begin{aligned}\n\\text{bill\\_length\\_mm}_i = 32.17 + 0.0045 * \\text{body\\_mass\\_g}_i\n\\end{aligned}\n\\]"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#bayes-with-default-settings",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#bayes-with-default-settings",
    "title": "Lab: Bayes and Penguins",
    "section": "Bayes with default settings",
    "text": "Bayes with default settings\nWe’ll be fitting our Bayesian models with the brms package. The primary function is brm().\nbrm() can work a lot like the OLS-based lm() function. For example, here’s how to fit a Bayesian version of our OLS model fit1.ols.\n\n\nCode\nfit1.b &lt;- brm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n\nNotice what’s happening in the console, below. We’ll get into the details of what just happened later. For now, appreciate we just fit our first Bayesian model, and it wasn’t all that hard.\nSummarize the model.\n\n\nCode\nsummary(fit1.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.13      3.49    25.12    38.97 1.00     4706     2982\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     4719     2959\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.91      0.26     2.46     3.46 1.00     1776     1573\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\n\nQuestion 1.3: Contrast the language of in the brm() output from the in the lm() output. Ignore ‘Rhat,’ ‘Bulk_ESS,’ and ‘Tail_ESS’ for now.\nThe estimated values are pretty similar in both models. \n\nThe frequentist model shows t and p value for all parameters.\n\nThe bayesian model shows the 95% confidence interval for all parameters.\nWe can get a quick and dirty plot of the fitted line with the conditional_effects() function.\n\n\nCode\nconditional_effects(fit1.b)\n\n\n\n\n\n\n\n\n\nCode\n# %&gt;% \n#   plot(points = TRUE)"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#coefficients-and-coefficient-plots",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#coefficients-and-coefficient-plots",
    "title": "Lab: Bayes and Penguins",
    "section": "Coefficients and coefficient plots",
    "text": "Coefficients and coefficient plots\nWe might want to compare the coefficient summaries from the OLS model to those from the Bayesian model. Here’s the frequentist summary:\n\n\nCode\ncbind(coef(fit1.ols),              # point estimates\n      sqrt(diag(vcov(fit1.ols))),  # standard errors\n      confint(fit1.ols))           # 95% CIs\n\n\n                                             2.5 %       97.5 %\n(Intercept) 32.174192865 3.4433622902 25.299298235 39.049087495\nbody_mass_g  0.004462694 0.0009176106  0.002630625  0.006294763\n\n\nWe can compute a focused summary of the Bayesian model with the fixef() function.\n\n\nCode\nfixef(fit1.b)\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.134697497 3.4895750251 25.118207632 38.968337279\nbody_mass_g  0.004476585 0.0009304701  0.002656551  0.006349207\n\n\nIn this case, the results are very similar.\nWe can also pull this information from our OLS model with the broom::tidy() function.\n\n\nCode\ntidy(fit1.ols, conf.int = TRUE)\n\n\n# A tibble: 2 × 7\n  term        estimate std.error statistic  p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept) 32.2      3.44          9.34 1.07e-13 25.3      39.0    \n2 body_mass_g  0.00446  0.000918      4.86 7.48e- 6  0.00263   0.00629\n\n\nIf you would like to use the tidy() function with your brms models, it will have to be the version of tidy() from the broom.mixed package.\n\n\nCode\ntidy(fit1.b)\n\n\n# A tibble: 3 × 8\n  effect   component group    term         estimate std.error conf.low conf.high\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 fixed    cond      &lt;NA&gt;     (Intercept)  32.1      3.49     25.1      39.0    \n2 fixed    cond      &lt;NA&gt;     body_mass_g   0.00448  0.000930  0.00266   0.00635\n3 ran_pars cond      Residual sd__Observa…  2.91     0.255     2.46      3.46   \n\n\nHere’s how to wrangle and combine these two results into a single data frame. Then we’ll make a coefficient plot.\n\n\nCode\nbind_rows(\n  tidy(fit1.ols, conf.int = TRUE) %&gt;% select(term, estimate, contains(\"conf\")),\n  tidy(fit1.b) %&gt;% select(term, estimate, contains(\"conf\")) %&gt;% filter(term != \"sd__Observation\")\n) %&gt;% \n  mutate(method = rep(c(\"lm()\", \"brm()\"), each = 2)) %&gt;% \n  \n  ggplot(aes(x = estimate, xmin = conf.low, xmax = conf.high, y = method)) +\n  geom_pointrange() +\n  scale_x_continuous(\"parameter space\", expand = expansion(mult = 0.2)) +\n  scale_y_discrete(expand = expansion(mult = 5)) +\n  facet_wrap(~ term, scales = \"free_x\")\n\n\n\n\n\n\n\n\n\nAt a superficial level for simple conventional regression type models, the results from a Bayesian brm() model will be very similar to those from an OLS lm() model. This will not always be case, and even in this example there are many differences once we look below the surface."
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#more-questionsexercise",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#more-questionsexercise",
    "title": "Lab: Bayes and Penguins",
    "section": "More Questions/Exercise",
    "text": "More Questions/Exercise\nGo back to the full penguins data set. This time, make a subset of the data called gentoo, which is only the cases for which species == \"Gentoo\".\n\n\nCode\ngentoo &lt;- penguins %&gt;% \n  filter(species == \"Gentoo\")\n\n\nCan you fit the same OLS model to these data?\n\n\nCode\nfit2.ols &lt;- lm(\n  data = gentoo,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n\nHow about plotting the results with predict()?\n\n\nCode\ngentoo_filtered = gentoo %&gt;% filter(!is.na(body_mass_g))\nod2 &lt;- tibble(body_mass_g = gentoo_filtered$body_mass_g)\npredict(fit2.ols,\n        interval = \"confidence\") %&gt;% \n  data.frame() %&gt;% \n  bind_cols(od2) %&gt;% \n  ggplot(aes(x = body_mass_g)) +\n  # 95% confidence interval ribbon\n  geom_ribbon(aes(ymin = lwr, ymax = upr),\n              alpha = 1/3) +\n  # point estimate line\n  geom_line(aes(y = fit)) +\n  geom_point(data = gentoo_filtered,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\n\nCode\nnd2 &lt;- tibble(body_mass_g = seq(from = min(gentoo$body_mass_g, na.rm=TRUE),\n                               to = max(gentoo$body_mass_g, na.rm=TRUE),\n                               length.out = 50))\n\npredict(fit2.ols,\n        interval = \"confidence\",\n        newdata = nd2) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd2) %&gt;% \n  ggplot(aes(x = body_mass_g)) +\n  # 95% confidence interval ribbon\n  geom_ribbon(aes(ymin = lwr, ymax = upr),\n              alpha = 1/3) +\n  # point estimate line\n  geom_line(aes(y = fit)) +\n  geom_point(data = gentoo,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\n\nCan you fit the same default Bayesian brm() model to these data?\n\n\nCode\nfit2.b &lt;- brm(\n  data = gentoo,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n\nHow about plotting the results with conditional_effects()?\n\n\nCode\nconditional_effects(fit2.b)\n\n\n\n\n\n\n\n\n\nCode\n# %&gt;% \n#   plot(points = TRUE)\n\n\nCan you make a coefficient plot comparing the new OLS and Bayesian beta coefficients?\n\n\nCode\nbind_rows(\n  tidy(fit2.ols, conf.int = TRUE) %&gt;% select(term, estimate, contains(\"conf\")),\n  tidy(fit2.b) %&gt;% select(term, estimate, contains(\"conf\")) %&gt;% filter(term != \"sd__Observation\")\n) %&gt;% \n  mutate(method = rep(c(\"lm()\", \"brm()\"), each = 2)) %&gt;% \n  \n  ggplot(aes(x = estimate, xmin = conf.low, xmax = conf.high, y = method)) +\n  geom_pointrange() +\n  scale_x_continuous(\"parameter space\", expand = expansion(mult = 0.2)) +\n  scale_y_discrete(expand = expansion(mult = 5)) +\n  facet_wrap(~ term, scales = \"free_x\")"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#exploring-model-results",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#exploring-model-results",
    "title": "Lab: Bayes and Penguins",
    "section": "Exploring model results",
    "text": "Exploring model results\nWe can extract the posterior draws from our Bayesian models with the as_draws_df() function.\n\n\nCode\nas_draws_df(fit1.b)\n\n\n# A draws_df: 1000 iterations, 4 chains, and 6 variables\n   b_Intercept b_body_mass_g sigma Intercept lprior lp__\n1           32        0.0045   3.0        49   -4.3 -171\n2           34        0.0039   2.8        49   -4.2 -171\n3           30        0.0051   2.9        49   -4.3 -172\n4           31        0.0046   2.7        49   -4.3 -171\n5           30        0.0052   3.4        49   -4.4 -173\n6           35        0.0036   3.4        49   -4.4 -173\n7           35        0.0039   3.0        49   -4.3 -171\n8           32        0.0043   2.7        48   -4.3 -172\n9           33        0.0043   2.8        49   -4.2 -171\n10          33        0.0042   2.9        49   -4.3 -171\n# ... with 3990 more draws\n# ... hidden reserved variables {'.chain', '.iteration', '.draw'}\n\n\nNote the meta data. We can get a sense of the full posterior distributions of the \\(\\beta\\) parameters with plots.\n\n\nCode\n# wrangle\nas_draws_df(fit1.b) %&gt;% \n  pivot_longer(starts_with(\"b_\")) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = value)) + \n  # geom_density(fill = \"grey20\") +\n  geom_histogram(bins = 40) +\n  facet_wrap(~ name, scales = \"free\")\n\n\n\n\n\n\n\n\n\nWe might summarize those posterior distributions with basic descriptive statistics, like their means, SD’s, and inner 95-percentile range.\n\n\nCode\nas_draws_df(fit1.b) %&gt;% \n  pivot_longer(starts_with(\"b_\")) %&gt;% \n  group_by(name) %&gt;% \n  summarise(mean = mean(value),\n            sd = sd(value),\n            ll = quantile(value, probs = 0.025),\n            ul = quantile(value, probs = 0.975))\n\n\n# A tibble: 2 × 5\n  name              mean       sd       ll       ul\n  &lt;chr&gt;            &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 b_Intercept   32.1     3.49     25.1     39.0    \n2 b_body_mass_g  0.00448 0.000930  0.00266  0.00635\n\n\nNotice how these values match up exactly with those from fixef().\n\n\nCode\nfixef(fit1.b)\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.134697497 3.4895750251 25.118207632 38.968337279\nbody_mass_g  0.004476585 0.0009304701  0.002656551  0.006349207\n\n\nThus,\n\nThe Bayesian posterior mean is analogous to the frequentist point estimate.\nThe Bayesian posterior SD is analogous to the frequentist standard error.\nThe Bayesian posterior percentile-based 95% (credible) interval is analogous to the frequentist 95% confidence interval.\n\nThese are not exactly the same, mind you. But they serve similar functions.\nWe can also get a sense of these distributions with the plot() function.\n\n\nCode\nplot(fit1.b)\n\n\n\n\n\n\n\n\n\nIgnore the trace plots on the right for a moment. And let’s consider the pairs() plot.\n\n\nCode\npairs(fit1.b)\n\n\n\n\n\n\n\n\n\nCode\n# we can adjust some of the settings with the off_diag_args argument\npairs(fit1.b, off_diag_args = list(size = 1/4, alpha = 1/4))\n\n\n\n\n\n\n\n\n\n\nQuestion 2.1 : In the parlance of Probability, do you know what is the term by which the distributions in the diagonal of the above plot are known as? And the distributions in the off-diagonal?\nThe diagonal ones are the marginal distributions of individual parameters.\n\nThe off-diagnoal ones are the bivariate marginal distributions, or the joint distributions of the paired two parameters, marginalized over the remaining parameters.\nNotice how the two \\(\\beta\\) parameters seem to have a strong negative correlation. We can quantify that correlation with the vcov() function.\n\n\nCode\nvcov(fit1.b)                      # variance/covariance metric\n\n\n              Intercept   body_mass_g\nIntercept   12.17713386 -3.231560e-03\nbody_mass_g -0.00323156  8.657746e-07\n\n\nCode\nvcov(fit1.b, correlation = TRUE)  # correlation metric\n\n\n             Intercept body_mass_g\nIntercept    1.0000000  -0.9952617\nbody_mass_g -0.9952617   1.0000000\n\n\nThis correlation/covariance among the parameters is not unique to Bayesian models. Here’s the vcov() output for the OLS model.\n\n\nCode\nvcov(fit1.ols)  # variance/covariance metric\n\n\n             (Intercept)   body_mass_g\n(Intercept) 11.856743861 -3.143295e-03\nbody_mass_g -0.003143295  8.420092e-07\n\n\nI’m not aware of an easy way to get that output in a correlation metric for our OLS model. Here’s how to compute the correlation by hand.\n\n\nCode\ncov_xy &lt;- vcov(fit1.ols)[2, 1]  # covariance between the intercept and slope\nvar_x  &lt;- vcov(fit1.ols)[1, 1]  # variance for the intercept\nvar_y  &lt;- vcov(fit1.ols)[2, 2]  # variance for the slope\n\n# convert the covariance into a correlation\ncov_xy / (sqrt(var_x) * sqrt(var_y))\n\n\n[1] -0.9948188\n\n\nThat code follows the definition of a covariance, which can be expressed as\n\\[\n\\text{Cov}(x, y) = \\rho \\sigma_x \\sigma_y,\n\\]\nwhere \\(\\sigma_x\\) is the standard deviation for x, \\(\\sigma_y\\) is the standard deviation for y, and \\(\\rho\\) is their correlation. And thus, you can convert a covariance into a correlation with the formula\n\\[\n\\rho = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y},\n\\]\nwhere \\(\\sigma_{xy}\\) is the covariance of x and y."
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#draws",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#draws",
    "title": "Lab: Bayes and Penguins",
    "section": "Draws",
    "text": "Draws\nLet’s save the as_draws_df() output for our model as an object called draws.\n\n\nCode\ndraws &lt;- as_draws_df(fit1.b)\nglimpse(draws)\n\n\nRows: 4,000\nColumns: 9\n$ b_Intercept   &lt;dbl&gt; 31.91014, 34.44629, 30.24621, 31.27667, 29.60343, 35.426…\n$ b_body_mass_g &lt;dbl&gt; 0.004488582, 0.003905465, 0.005091887, 0.004635125, 0.00…\n$ sigma         &lt;dbl&gt; 2.999862, 2.779877, 2.944221, 2.686662, 3.362299, 3.3930…\n$ Intercept     &lt;dbl&gt; 48.66641, 49.02574, 49.25468, 48.58000, 48.89175, 48.896…\n$ lprior        &lt;dbl&gt; -4.322328, -4.244607, -4.276130, -4.254156, -4.399914, -…\n$ lp__          &lt;dbl&gt; -171.0782, -171.1802, -171.7580, -171.3797, -172.6857, -…\n$ .chain        &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ .iteration    &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ .draw         &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n\n\nFor each parameter in the model, we have 4,000 draws from the posterior.\n\nQuestion 2.2: How does this concept relate to representing uncertainty? Can you anticipate how predictions are made based upon these 4000 draws and the linear regression formula?\nSince we hae 4000 posterior samples, the spread can tell us how uncertain we are about each parameter. We can also get the mean and the 95% confidence interval from the distribution.\n\nFor each value of x, the predictions are made by averaging the predicted values across the 4000 samples of the parameters.\n\\[\n\\widehat{\\text{bill\\_length\\_mm}}_i = \\beta_0 + \\beta_1 \\text{body\\_mass\\_g}_i.\n\\]\nLet’s break the 4000 draws down with our draws object.\n\n\nCode\n# adjust the parameter names \ndraws &lt;- draws %&gt;% \n  mutate(beta0 = b_Intercept,\n         beta1 = b_body_mass_g)\n\n# Note: go through this one line at a time\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  geom_histogram(bins = 40) +\n  labs(title = \"Bayesians have posterior distributions\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\n\nHere’s what that is for the OLS model.\n\n\nCode\npredict(fit1.ols,\n        newdata = tibble(body_mass_g = mean(chinstrap$body_mass_g)),\n        interval = \"confidence\") %&gt;% \n  data.frame() %&gt;% \n  \n  ggplot(aes(x = fit, xmin = lwr, xmax = upr, y = 0)) +\n  geom_pointrange() +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Frequentists have point estmates and 95% CI's\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\n\nAnother handy way to present a Bayesian posterior is as a density with a point-interval summary below.\n\n\nCode\nlibrary(ggdist) #for stat_half_eye and mean_qi\ndraws %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  stat_halfeye(point_interval = mean_qi, .width = .95) +\n  # scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Bayesians have posterior distributions\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\n\nThe dot at the base of the plot is the posterior mean, and the horizontal line marks the 95% percentile-based interval. If you’d like to mark the median instead, set point_interval = median_qi. If you’re like a different kind of horizontal interval, adjust the .width argument.\n\n\nCode\ndraws %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  # note the changes to this line\n  stat_halfeye(point_interval = median_qi, .width = c(.5, .99)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Bayesians have posterior distributions\",\n       subtitle = \"The dot marks the median.\\nThe thicker line marks the 50% interval, and\\nthe thinner line marks the 99% interval.\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#about-those-means-sds-and-intervals.",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#about-those-means-sds-and-intervals.",
    "title": "Lab: Bayes and Penguins",
    "section": "About those means, SD’s, and intervals.",
    "text": "About those means, SD’s, and intervals.\nYou can describe a Bayesian posterior in a lot of different ways. Earlier we said the posterior mean is the Bayesian point estimate. This isn’t strictly true. Means are very popular, but you can summarize a posterior by its mean, median, or mode.\nLet’s see what this looks like in practice. First, we compute and save our statistics for each of our model parameters.\n\n\nCode\npoints &lt;- draws %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  group_by(parameter) %&gt;% \n  summarise(mean = mean(value),\n            median = median(value),\n            mode = Mode(value)) %&gt;% \n  pivot_longer(starts_with(\"m\"), names_to = \"statistic\")\n\n# what?\npoints\n\n\n# A tibble: 9 × 3\n  parameter statistic    value\n  &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n1 beta[0]   mean      32.1    \n2 beta[0]   median    32.2    \n3 beta[0]   mode      32.2    \n4 beta[1]   mean       0.00448\n5 beta[1]   median     0.00447\n6 beta[1]   mode       0.00448\n7 sigma     mean       2.91   \n8 sigma     median     2.89   \n9 sigma     mode       2.84   \n\n\nNow plot.\n\n\nCode\ndraws %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  \n  ggplot(aes(x = value)) +\n  geom_density() +\n  geom_vline(data = points,\n             aes(xintercept = value, color = statistic),\n             size = 3/4) +\n  scale_color_viridis_d(option = \"A\", end = .8) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  xlab(\"parameter space\") +\n  facet_wrap(~ parameter, labeller = label_parsed, scales = \"free\", ncol = 1) +\n  theme(strip.text = element_text(size = 14))\n\n\n\n\n\n\n\n\n\n\nQuestion 2.3: Discuss the skew in \\(\\sigma\\).Why it might arise, etc.?\n$\\sigma$ might be skewed becasue a few reasons.\n\nFirst, it can't be negative, so it is bounded below 0.\n\nSecond, we might have a weak prior for $\\sigma$, which will result in posterior uncertainty that includes the possibility of high residual variability, resulting in a longer right tail in the posterior.\n\nThird, there could be some outliers that inflates $\\sigma$, making its posterior distribution more right-skewed.\n\nThe mean is the brms default summary, and McElreath (2015, 2020) defaulted to the mean in his texts.\nThe median is also available for many brms functions, and it’s what Gelman et al (2020) recommend.\nThe mode can be attractive for very skewed distributions, and it’s what Kruschke (2015) used in his text.\n\nWith many brms functions, you can request the median by setting robust = TRUE. For example:\n\n\nCode\nfixef(fit1.b)                 # means\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.134697497 3.4895750251 25.118207632 38.968337279\nbody_mass_g  0.004476585 0.0009304701  0.002656551  0.006349207\n\n\nCode\nfixef(fit1.b, robust = TRUE)  # medians\n\n\n               Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.16047598 3.3990983222 25.118207632 38.968337279\nbody_mass_g  0.00447104 0.0009022786  0.002656551  0.006349207\n\n\n\n\nQuestion 2.4: Given the skew in sigma and what you know about summary statistics, what might be the implication of using just the mean, median, or mode of posteriors to make a prediction?\nThe mean is pulled toward the tail, so using the mean of sigma will lead to wider predicted intervals (more conservative), but we might overestimate uncertainty in new predictions if the skew is strong.\n\nThe median is robust to the skew, so using the median provides a balanced summary that is not too influenced by tail values.\n\nThe mode is often below the mean when the distribution is right skewed, so using the mode of sigma could underestimate uncertainty and produce overconfident predictions.\n\nOverall, it is better to use the entire posterior, which full captures the uncertainty, including the skew, instead of using only a single value of the distribution.\n\nSD’s and MAD SD’s.\nEarlier we said the posterior SD is the Bayesian standard error. This isn’t strictly true. You can also use the median absolute deviation (MAD SD). If we let \\(M\\) stand for the median of some variable \\(y\\), which varies across \\(i\\) cases, we can define the MAD SD as\n\\[\n\\textit{MAD SD} = 1.4826 \\times \\operatorname{median}_{i = 1}^n |y_i - M|,\n\\]\nwhere \\(1.4826\\) is a constant that scales the MAD SD into a standard-deviation metric. Here’s what this looks like in practice.\n\n\nCode\n# go through this line by line\ndraws %&gt;% \n  select(beta0) %&gt;% \n  mutate(mdn = median(beta0)) %&gt;% \n  mutate(`|yi - mdn|` = abs(beta0 - mdn)) %&gt;% \n  summarise(MAD_SD = 1.4826 * median(`|yi - mdn|`))\n\n\n# A tibble: 1 × 1\n  MAD_SD\n   &lt;dbl&gt;\n1   3.40\n\n\nBase R also has a mad() function.\n\n\nCode\n?mad\n\n\nHelp on topic 'mad' was found in the following packages:\n\n  Package               Library\n  posterior             /Users/kw1166/Library/Caches/org.R-project.R/R/renv/cache/v5/macos/R-4.4/x86_64-apple-darwin20/posterior/1.6.0/fc1213566f2ed9f0b15bef656ed1000b\n  stats                 /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/library\n\n\nUsing the first match ...\n\n\nCode\ndraws %&gt;% \n  summarise(MAD_SD = mad(beta0))\n\n\n# A tibble: 1 × 1\n  MAD_SD\n   &lt;dbl&gt;\n1   3.40\n\n\nYou can request the MAD SD from many brms functions by setting robust = TRUE.\n\n\nCode\nfixef(fit1.b)                 # SD\n\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.134697497 3.4895750251 25.118207632 38.968337279\nbody_mass_g  0.004476585 0.0009304701  0.002656551  0.006349207\n\n\nCode\nfixef(fit1.b, robust = TRUE)  # MAD SD\n\n\n               Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.16047598 3.3990983222 25.118207632 38.968337279\nbody_mass_g  0.00447104 0.0009022786  0.002656551  0.006349207\n\n\n\nTo my eye, many authors (e.g., Kruschke, McElreath) just use the SD.\nGelman et al (see Section 5.3) recommend the MAD SD.\n\n\n\nBayesian intervals.\nBayesians describe the widths of their posteriors with intervals. I’ve seen these variously described as confidence intervals, credible intervals, probability intervals, and even uncertainty intervals. My recommendation is just pick a term, and clearly tell your audience what you mean (e.g., at the end of a Method section in a journal article).\nTo my eye, the most popular interval is a 95% percentile-based interval. 95% is conventional, perhaps due to the popularity of the 95% frequentist confidence interval, which is related to the 0.05 alpha level used for the conventional \\(p\\)-value cutoff. However, you can use other percentiles. Some common alternatives are 99%, 89%, 80%, and 50%.\nAlso, Bayesian intervals aren’t always percentile based. An alternative is the highest posterior density interval (HPDI), which has mathematical properties some find desirable.\nbrms only supports percentile-based intervals, but it does allow for a variety of different ranges via the prob argument. For example, here’s how to request 80% intervals in summary().\n\n\nCode\nsummary(fit1.b, prob = .80)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-80% CI u-80% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.13      3.49    27.84    36.47 1.00     4706     2982\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     4719     2959\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-80% CI u-80% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.91      0.26     2.60     3.25 1.00     1776     1573\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nRegarding interval widths:\n\n95% Intervals are widely used.\nMcElreat likes 89% intervals, and uses them as a default in his rethinking package.\nSome of the bayesplot, ggdist, and tidybayes functions return 80% intervals.\nSome of the ggdist, and tidybayes functions return 66% or 50% intervals.\nI’ve heard Gelman report his fondness for 50% intervals on his blog (https://statmodeling.stat.columbia.edu/2016/11/05/why-i-prefer-50-to-95-intervals/).\n\nRegarding interval types:\n\nPercentile-based intervals are widely used in the Stan ecosystem, and are supported in texts like Gelman et al.\nKruschke has consistently advocates for HPDI’s in his articles, and in his text.\n\n\n\n\nPosterior summaries with tidybayes.\nMatthew Kay’s tidybayes package (https://mjskay.github.io/tidybayes/) offers an array of convenience functions for summarizing posterior distributions with points and intervals. See the Point summaries and intervals section of Kay’s Extracting and visualizing tidy draws from brms models vignette (https://mjskay.github.io/tidybayes/articles/tidy-brms.html#point-summaries-and-intervals) for a detailed breakdown. In short, the family of functions use the naming scheme [median|mean|mode]_[qi|hdi]. Here are a few examples.\n\n\nCode\ndraws %&gt;% mean_qi(beta0)                        # mean and 95% percentile interval\n\n\n# A tibble: 1 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.1   25.1   39.0   0.95 mean   qi       \n\n\nCode\ndraws %&gt;% median_qi(beta0, .width = .80)        # median and 80% percentile interval\n\n\n# A tibble: 1 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.2   27.8   36.5    0.8 median qi       \n\n\nCode\ndraws %&gt;% mode_hdi(beta0, .width = c(.5, .95))  # mode, with 95 and 50% HPDI's\n\n\n# A tibble: 2 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.2   29.4   33.9   0.5  mode   hdi      \n2  32.2   25.2   39.0   0.95 mode   hdi      \n\n\nAs an aside, the Mode() function we used a while back was also from tidybayes.\n\n\nSpaghetti plots.\nRemember how we said the draw was something like 4,000 separate equations for our Bayesian model? Let’s see that again.\n\n\nCode\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  # here's the equation\n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  # subset the top 6\n  head()\n\n\n# A tibble: 6 × 5\n  .draw beta0   beta1 body_mass_g y_hat\n  &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1     1  31.9 0.00449       3733.  48.7\n2     2  34.4 0.00391       3733.  49.0\n3     3  30.2 0.00509       3733.  49.3\n4     4  31.3 0.00464       3733.  48.6\n5     5  29.6 0.00517       3733.  48.9\n6     6  35.4 0.00361       3733.  48.9\n\n\nOne way we might emphasize the 4,000 equations is with a spaghetti plot. When we display the fitted line for bill_length_mm over the range of body_mass_g values, we can display a single line for each posterior draw. Here’s what that can look like.\n\n\nCode\nrange(chinstrap$body_mass_g)\n\n\n[1] 2700 4800\n\n\nCode\n# Note: go through this one line at a time\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw)) +\n  geom_line(linewidth = 1/10, alpha = 1/10)\n\n\n\n\n\n\n\n\n\nIt might be easier to see what’s going on with a random subset of, say, 10 of the posterior draws.\n\n\nCode\nset.seed(10)\n\ndraws %&gt;% \n  # take a random sample of 10 rows\n  slice_sample(n = 10) %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw)) +\n  geom_line(linewidth = 1/2, alpha = 1/2)\n\n\n\n\n\n\n\n\n\nWhile we’re at it, let’s take 20 draws and do a little color coding.\n\n\nCode\nset.seed(20)\n\ndraws %&gt;% \n  # take a random sample of 20 rows\n  slice_sample(n = 20) %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw, color = beta0)) +\n  geom_line() +\n  scale_color_viridis_c(expression(beta[0]~(the~intercept)), end = .9)\n\n\n\n\n\n\n\n\n\nDo you remember how we said \\(\\beta_0\\) and \\(\\beta_1\\) had a strong negative correlation? Notice how the lines computed by lower \\(\\beta_0\\) values also tend to have higher slopes. This will happen all the time with conventional regression models.\n\n\nQuestion 2.5: We have done all this without yet specifying a prior. What do you think is going on?\nThe brms package assigns default priors (weakly informative priors) to all the parameters, even though we didn't specify any."
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#questionexercise",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#questionexercise",
    "title": "Lab: Bayes and Penguins",
    "section": "Question/Exercise:",
    "text": "Question/Exercise:\nIn the last part, we made a subset of the penguins data called gentoo, which was only the cases for which species == \"Gentoo\". Do that again and refit the Bayesian model to those data. Can you then remake some of the figures in this file with the new version of the model?\n\n\nCode\n# wrangle\nas_draws_df(fit2.b) %&gt;% \n  pivot_longer(starts_with(\"b_\")) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = value)) + \n  # geom_density(fill = \"grey20\") +\n  geom_histogram(bins = 40) +\n  facet_wrap(~ name, scales = \"free\")\n\n\n\n\n\n\n\n\n\nCode\npairs(fit2.b)\n\n\n\n\n\n\n\n\n\n\n\nCode\ndraws2 &lt;- as_draws_df(fit2.b)\n\n# adjust the parameter names \ndraws2 &lt;- draws2 %&gt;% \n  mutate(beta0 = b_Intercept,\n         beta1 = b_body_mass_g)\n\ndraws2 %&gt;% \n  mutate(body_mass_g = mean(gentoo$body_mass_g, na.rm=TRUE)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  ggplot(aes(x = y_hat)) +\n  # note the changes to this line\n  stat_halfeye(point_interval = median_qi, .width = c(.5, .99)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Bayesians have posterior distributions\",\n       subtitle = \"The dot marks the median.\\nThe thicker line marks the 50% interval, and\\nth thinner line marks the 99% interval.\")\n\n\n\n\n\n\n\n\n\nCode\npoints &lt;- draws2 %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  group_by(parameter) %&gt;% \n  summarise(mean = mean(value),\n            median = median(value),\n            mode = Mode(value)) %&gt;% \n  pivot_longer(starts_with(\"m\"), names_to = \"statistic\")\n\n\ndraws2 %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  ggplot(aes(x = value)) +\n  geom_density() +\n  geom_vline(data = points,\n             aes(xintercept = value, color = statistic),\n             size = 3/4) +\n  scale_color_viridis_d(option = \"A\", end = .8) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  xlab(\"parameter space\") +\n  facet_wrap(~ parameter, labeller = label_parsed, scales = \"free\", ncol = 1) +\n  theme(strip.text = element_text(size = 14))\n\n\n\n\n\n\n\n\n\nCode\nset.seed(20)\n\ndraws2 %&gt;% \n  # take a random sample of 20 rows\n  slice_sample(n = 20) %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(gentoo$body_mass_g, na.rm=TRUE)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw, color = beta0)) +\n  geom_line() +\n  scale_color_viridis_c(expression(beta[0]~(the~intercept)), end = .9)"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#references",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#references",
    "title": "Lab: Bayes and Penguins",
    "section": "References",
    "text": "References\nGelman, A., Hill, J., & Vehtari, A. (2020). Regression and other stories. Cambridge University Press. https://doi.org/10.1017/9781139161879\nKruschke, J. K. (2015). Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan. Academic Press. https://sites.google.com/site/doingbayesiandataanalysis/\nMcElreath, R. (2020). Statistical rethinking: A Bayesian course with examples in R and Stan (Second Edition). CRC Press. https://xcelab.net/rm/statistical-rethinking/\nMcElreath, R. (2015). Statistical rethinking: A Bayesian course with examples in R and Stan. CRC press. https://xcelab.net/rm/statistical-rethinking/"
  },
  {
    "objectID": "posts/04-02 Bayes 1/Bayes_Lab_1.html#session-information",
    "href": "posts/04-02 Bayes 1/Bayes_Lab_1.html#session-information",
    "title": "Lab: Bayes and Penguins",
    "section": "Session information",
    "text": "Session information\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS 15.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] ggdist_3.3.2        broom.mixed_0.2.9.6 broom_1.0.7        \n [4] brms_2.22.0         Rcpp_1.0.14         ggside_0.3.1       \n [7] lubridate_1.9.4     forcats_1.0.0       stringr_1.5.1      \n[10] dplyr_1.1.4         purrr_1.0.4         readr_2.1.5        \n[13] tidyr_1.3.1         tibble_3.2.1        ggplot2_3.5.1      \n[16] tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     viridisLite_0.4.2    farver_2.1.2        \n [4] loo_2.8.0            fastmap_1.2.0        tensorA_0.36.2.1    \n [7] digest_0.6.37        estimability_1.5.1   timechange_0.3.0    \n[10] lifecycle_1.0.4      StanHeaders_2.32.10  processx_3.8.5      \n[13] magrittr_2.0.3       posterior_1.6.0      compiler_4.4.1      \n[16] rlang_1.1.4          tools_4.4.1          utf8_1.2.4          \n[19] yaml_2.3.10          knitr_1.49           labeling_0.4.3      \n[22] bridgesampling_1.1-2 htmlwidgets_1.6.4    curl_6.2.0          \n[25] pkgbuild_1.4.6       plyr_1.8.9           abind_1.4-8         \n[28] withr_3.0.2          grid_4.4.1           stats4_4.4.1        \n[31] xtable_1.8-4         colorspace_2.1-1     future_1.34.0       \n[34] inline_0.3.21        emmeans_1.10.7       globals_0.16.3      \n[37] scales_1.3.0         cli_3.6.3            mvtnorm_1.3-3       \n[40] rmarkdown_2.28       generics_0.1.3       RcppParallel_5.1.10 \n[43] rstudioapi_0.17.1    reshape2_1.4.4       tzdb_0.4.0          \n[46] rstan_2.32.6         splines_4.4.1        bayesplot_1.11.1    \n[49] parallel_4.4.1       matrixStats_1.5.0    vctrs_0.6.5         \n[52] V8_6.0.3             Matrix_1.7-0         jsonlite_1.8.8      \n[55] callr_3.7.6          hms_1.1.3            listenv_0.9.1       \n[58] glue_1.8.0           parallelly_1.42.0    ps_1.9.0            \n[61] codetools_0.2-20     distributional_0.5.0 stringi_1.8.4       \n[64] gtable_0.3.6         QuickJSR_1.5.2       palmerpenguins_0.1.1\n[67] munsell_0.5.1        pillar_1.10.1        furrr_0.3.1         \n[70] htmltools_0.5.8.1    Brobdingnag_1.2-9    R6_2.5.1            \n[73] evaluate_1.0.3       lattice_0.22-6       backports_1.5.0     \n[76] renv_1.0.7           rstantools_2.4.0     gridExtra_2.3       \n[79] coda_0.19-4.1        nlme_3.1-164         checkmate_2.3.2     \n[82] mgcv_1.9-1           xfun_0.51            pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/04-13 Latex testing/latex testing.html",
    "href": "posts/04-13 Latex testing/latex testing.html",
    "title": "Lab: Bayes_Lab_2",
    "section": "",
    "text": "\\[\n\\begin{aligned}\n\\operatorname{bill\\_length\\_mm}_i &= \\beta_0 + \\beta_3 \\operatorname{body\\_mass\\_g}_i + \\epsilon_i \\\\\n\\epsilon_i & \\sim \\operatorname{Normal}(0, \\sigma_\\epsilon), \\\\\n\\end{aligned}\n\\]\n\\[\n\\text{bill\\_length\\_mm}_i = \\beta_0 + \\beta_3 \\text{body\\_mass\\_g}_i + \\epsilon_i\n\\]\n\\[\n\\epsilon_i \\sim \\operatorname{Normal}(0, 1)\n\\]"
  },
  {
    "objectID": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html",
    "href": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html",
    "title": "PSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025",
    "section": "",
    "text": "During the first Bayes Lab you considered exploratory data analysis, compared default brms with lm(), and extracted posteriors after fitting models. You summarized posterior distributions and also generated a distribution of predictions using these posterior draws.\n\nDuring the second Bayes lab, you looked at the different types of distributions that are relevant for Bayesian analysis, including priors.\nDuring today’s lab, you will go into prior predictive checks and some HMC diagnostics. While we look at the simple linear modeling case, this workflow is relevant for all Bayesian models."
  },
  {
    "objectID": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#setup-packages-and-data",
    "href": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#setup-packages-and-data",
    "title": "PSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025",
    "section": "Setup: Packages and data",
    "text": "Setup: Packages and data\nLoad the primary packages.\n\n\nCode\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(tidybayes)\n# library(truncnorm)  # if needed\n\n\nThis time we’ll be taking data from the moderndive package. We want the evals data set.\n\n\nCode\ndata(evals, package = \"moderndive\")\n\n\nThe evals data were originally in the paper by Hamermesh and Parker (2005; https://doi.org/10.1016/j.econedurev.2004.07.013). You can learn more about the data like this:\n\n\nCode\n?moderndive::evals\n\n\nYou can learn even more information about the data from https://www.openintro.org/data/index.php?data=evals.\nAnyway, we need to subset the data.\n\n\nCode\nevals94 &lt;- evals %&gt;% \n  group_by(prof_ID) %&gt;% \n  slice(1) %&gt;% \n  ungroup()\n\nglimpse(evals94)\n\n\nRows: 94\nColumns: 14\n$ ID           &lt;int&gt; 1, 5, 8, 10, 18, 24, 31, 36, 43, 50, 60, 63, 68, 75, 79, …\n$ prof_ID      &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17…\n$ score        &lt;dbl&gt; 4.7, 4.6, 4.1, 4.5, 4.8, 4.4, 4.4, 3.4, 4.8, 4.0, 3.6, 4.…\n$ age          &lt;int&gt; 36, 59, 51, 40, 31, 62, 33, 51, 33, 47, 35, 37, 42, 49, 3…\n$ bty_avg      &lt;dbl&gt; 5.000, 3.000, 3.333, 3.167, 7.333, 5.500, 4.167, 4.000, 4…\n$ gender       &lt;fct&gt; female, male, male, female, female, male, female, female,…\n$ ethnicity    &lt;fct&gt; minority, not minority, not minority, not minority, not m…\n$ language     &lt;fct&gt; english, english, english, english, english, english, eng…\n$ rank         &lt;fct&gt; tenure track, tenured, tenured, tenured, tenure track, te…\n$ pic_outfit   &lt;fct&gt; not formal, not formal, not formal, not formal, not forma…\n$ pic_color    &lt;fct&gt; color, color, color, color, color, color, color, color, c…\n$ cls_did_eval &lt;int&gt; 24, 17, 55, 40, 42, 182, 33, 25, 48, 16, 18, 30, 28, 30, …\n$ cls_students &lt;int&gt; 43, 20, 55, 46, 48, 282, 41, 41, 60, 19, 25, 34, 40, 36, …\n$ cls_level    &lt;fct&gt; upper, upper, upper, upper, upper, upper, upper, upper, u…"
  },
  {
    "objectID": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#intercept-only-model",
    "href": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#intercept-only-model",
    "title": "PSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025",
    "section": "Intercept-only model",
    "text": "Intercept-only model\nLet’s start by fitting an intercept-only model\n\\[\n\\begin{align}\n\\text{bty\\_avg}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 \\\\\n\\beta_0 & \\sim \\text{???} \\\\\n\\sigma & \\sim \\text{???},\n\\end{align}\n\\]\nwhere \\(\\beta_0\\) is the same as the unconditional population mean, and the population standard deviation is \\(\\sigma\\). Our next task will be choosing our priors.\n\nQuestion 1: Why have we left some of the specification above unfilled / with questions marks at this point?\nBecause here \\(\\beta_0\\) and \\(\\sigma\\) are disributions, and we don’t have a chosen prior distribution for them just yet.\n\n\nVisualize possible prior distributions.\nIn this exercise, we’ll choose the priors together. Let’s start with prior on \\(\\beta_0\\). Below are a few candidate distributions visualized with ggdist and friends.\n\n\nCode\nc(\n  prior(normal(5.5, 1)),\n  prior(normal(8, 2)),\n  prior(normal(5.5, 2))\n) %&gt;% \n  parse_dist() %&gt;% \n\n  ggplot(aes(xdist = .dist_obj, y = prior)) + \n  stat_halfeye(point_interval = mean_qi, .width = c(.5, .95)) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  labs(subtitle = \"The red lines mark the lower and upper boundaries.\",\n       x = expression(italic(p)(beta[0])),\n      y = NULL)\n\n\n\n\n\n\n\n\n\nThe red lines in the figures (shown at x=1 and x=10) represent the lower and upper boundaries for the beauty ratings scale used in the study. With the simple intercept model, setting a prior on the intercept parameter is the same as setting a prior on the expected mean in observation space.\nNow let’s visualize a few potential priors for \\(\\sigma\\).\n\n\nCode\nc(\n  prior(exponential(1)), \n  prior(normal(0, 1), lb = 0), \n  prior(normal(2, 0.3), lb = 0)\n) %&gt;% \n  parse_dist() %&gt;% \n  \n  ggplot(aes(xdist = .dist_obj, y = prior)) + \n  stat_halfeye(point_interval = mean_qi, .width = c(.5, .95)) +\n  xlab(expression(italic(p)(sigma))) +\n  ylab(NULL)\n\n\n\n\n\n\n\n\n\n\nQuestion 2: Given that \\(\\sigma\\) refers to the standard deviation, are these three priors theoretically possible? If yes, give an example of a theoretically impossible prior for \\(\\sigma\\).\nYes, they should all be theoretically possible, since we only need \\(\\sigma\\) to be bigger than 0, and all three priors satisfy that.\nA theoretically impossible prior would be a normal distribution with mean 0 and standard deviation 1, but not having a left bound and cutoff at 0.\n\n\n\nPrior-predictive checks (by hand).\nNote: It’s possible we’ll need the truncnorm::rtruncnorm() function in this section. Once we have candidate priors for both \\(\\beta_0\\) and \\(\\sigma\\), we can simulate values from those priors and plot the implied distributions.\n\n\nCode\n# how many distributions do you want?\nn &lt;- 50\n\n# do you want to make the simulation reproducible?\n# set.seed(1)\n\n# simulate values from the priors\ntibble(iter = 1:n,\n       # choose the hyperparameter values with the class\n       beta0 = rnorm(n = n, mean = 5.5, sd = 1),\n       sigma = rexp(n = n, rate = 1 / 1)) %&gt;% \n  expand_grid(bty_avg = seq(from = -2, to = 13, by = 0.025)) %&gt;% \n  mutate(density = dnorm(x = bty_avg, mean = beta0, sd = sigma)) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = bty_avg, y = density, group = iter)) +\n  geom_line(linewidth = 1/3, alpha = 1/2) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  coord_cartesian(xlim = c(-1, 12),\n                  ylim = c(0, 3)) +\n  labs(subtitle = expression(\"Prior predictive distributions based on \"*italic(p)(beta[0])~and~italic(p)(sigma)))\n\n\n\n\n\n\n\n\n\nThe simulated values constitute predictions that are made using our prior beliefs (a prior is set for beta0 and another for sigma) When you check if these predictions (prior predictive) make sense or not, it is called the prior predictive check. The point of the prior predictive check is to iterate on specifying the priors until the prior predictive is sensible/satisfactory.\n(Again, the red boundaries denote that the only possible bty_avg values are between 1 and 10.)\n\nQuestion 3: Can Explain what the section of the previous command, before ggplot is doing?\nThe code first sets the number of draws to 50. Then creates a tibble with 50 rows, where each row is a simulated \\(\\beta\\) and \\(\\sigma\\). Then we attach a column bty_avg that ranges from –2 to 13 with step 0.025 for every draw, making the tibble 30,050 rows. Then for each bty_avg value, we calculate the density of the normal distribution given each \\(\\beta\\) and \\(\\sigma\\). Then we plot the 50 density plots for the 50 distributions.\n\n\nQuestion 4: The prior predictive above is for one combination of our candidate priors. Why don’t you also try the \\(\\beta_0\\) prior centered at 8, along with the \\(\\sigma\\) prior centered at 2? What do you observe? Among these two , which would you pick? And why? (Optional: try others too if you’d like)\n\n\nCode\n# how many distributions do you want?\nn &lt;- 50\n\n# do you want to make the simulation reproducible?\n# set.seed(1)\n\n# simulate values from the priors\ntibble(iter = 1:n,\n       # choose the hyperparameter values with the class\n       beta0 = rnorm(n = n, mean = 8, sd = 2),\n       sigma = rnorm(n = n, mean = 2, sd = 0.3)) %&gt;% \n  expand_grid(bty_avg = seq(from = -2, to = 13, by = 0.025)) %&gt;% \n  mutate(density = dnorm(x = bty_avg, mean = beta0, sd = sigma)) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = bty_avg, y = density, group = iter)) +\n  geom_line(linewidth = 1/3, alpha = 1/2) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  coord_cartesian(xlim = c(-1, 12),\n                  ylim = c(0, 3)) +\n  labs(subtitle = expression(\"Prior predictive distributions based on \"*italic(p)(beta[0])~and~italic(p)(sigma)))\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(truncnorm)\n# how many distributions do you want?\nn &lt;- 50\n\n# do you want to make the simulation reproducible?\n# set.seed(1)\n\n# simulate values from the priors\ntibble(iter = 1:n,\n       # choose the hyperparameter values with the class\n       beta0 = rnorm(n = n, mean = 5.5, sd = 2),\n       sigma = rtruncnorm(n = n, a = 0, mean = 0, sd = 1))  %&gt;% \n  expand_grid(bty_avg = seq(from = -2, to = 13, by = 0.025)) %&gt;% \n  mutate(density = dnorm(x = bty_avg, mean = beta0, sd = sigma)) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = bty_avg, y = density, group = iter)) +\n  geom_line(linewidth = 1/3, alpha = 1/2) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  coord_cartesian(xlim = c(-1, 12),\n                  ylim = c(0, 3)) +\n  labs(subtitle = expression(\"Prior predictive distributions based on \"*italic(p)(beta[0])~and~italic(p)(sigma)))\n\n\n\n\n\n\n\n\n\nThe \\(\\beta_0\\) prior centered at 8 with the \\(\\sigma\\) prior centered at 2 has a much wider density plot. I don’t like how it’s centered around 8 though. I also tried a third one, where the \\(\\beta_0\\) prior is centered at 5.5 with an sd of 2, and the \\(\\sigma\\) prior is a truncated normal distribution of mean 0 and sd 1. I think I would prefer the first one, since all the density plots are within the lower and upper boundaries.\n\n\n\nFit the model that you prefer\nWe should practice writing out our model equation with our priors of choice:\n\\[\n\\begin{align}\n\\text{bty\\_avg}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 \\\\\n\\beta_0 & \\sim \\text{Normal}(5.5,\\,1) \\\\\n\\sigma & \\sim \\text{Exponential}(1).\n\\end{align}\n\\]\nLet’s fit a model with our priors of choice.\n\n\nCode\nfit9.b = brm(\n  data = evals94,\n  family = gaussian,\n  bty_avg ~ 1,\n  # make sure we're settled on our priors \n  # we don't need to use these; they're placeholders\n  prior = prior(normal(5.5, 1), class = Intercept) +\n    prior(exponential(1), class = sigma)\n)\n\n\nCheck the model summary.\n\n\nCode\nsummary(fit9.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bty_avg ~ 1 \n   Data: evals94 (Number of observations: 94) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept     4.62      0.17     4.30     4.95 1.00     3636     2922\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.60      0.12     1.39     1.84 1.00     3769     2947\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nNow we might do a posterior predictive check to see how well our model describes the data.\n\n\nCode\nset.seed(1)\npp_check(fit9.b, ndraws = 100) +\n  ggtitle(\"posterior predictive check\")\n\n\n\n\n\n\n\n\n\nCode\nset.seed(2)\npp_check(fit9.b, ndraws = 8,\n         type = \"hist\", binwidth = 0.5) +\n  # yes, we can add our red lines to our pp-check\n  geom_vline(xintercept = c(1, 10), color = \"red\")  +\n  ggtitle(\"posterior predictive check\")\n\n\n\n\n\n\n\n\n\nOur simple Gaussian model doesn’t do a great job respecting the lower and upper boundaries, but this is about as good as it gets when you’re in Gaussian land. On the whole, the model did a pretty okay reproducing the gross features of the distribution of the sample data.\n\nQuestion 5: To ensure you’ve understood things well, can you write below about the difference between the prior predictive check and the posterior predictive check? How do they differ in their objectives?\nThe prior predictive check draws from the prior distributions. It is used to evaluate prior plausibility and can help detect unrealistic priors or unreasonable model behavior early in the modeling process.\nThe posterior predictive checks draws from the posterior distributions. It is used to check for model fit, as it takes into account both the data and the prior."
  },
  {
    "objectID": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#prior-predictive-checks-by-sample_prior-only",
    "href": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#prior-predictive-checks-by-sample_prior-only",
    "title": "PSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025",
    "section": "Prior-predictive checks (by sample_prior = \"only\")",
    "text": "Prior-predictive checks (by sample_prior = \"only\")\nWe can also sample from the prior predictive distribution from brm() itself. To do so, we use the sample_prior argument, which has the following options:\n\n\"no\", which is the default, and does not sample from the prior;\n\"yes\",, which will sample from both the prior and the posterior; and\n\"only\", which will only sample from the prior.\n\nLet’s set sample_prior = \"only\".\n\n\nCode\n# check to see if we want to use other priors\n\nfit10.b = brm(\n  data = evals94,\n  family = gaussian,\n  bty_avg ~ 1,\n  prior = prior(normal(5.5, 1), class = Intercept) +\n    prior(exponential(1), class = sigma),\n  # here's the magic\n  sample_prior = \"only\",\n  # we can set our seed, too!\n  seed = 1\n)\n\n\nDid you notice how we used the seed argument? This makes the results reproducible.\nNow the summary() function only returns summaries for the priors, NOT the posterior.\n\n\nCode\nsummary(fit10.b)  # this summarizes the prior\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bty_avg ~ 1 \n   Data: evals94 (Number of observations: 94) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept     5.49      1.00     3.49     7.45 1.00     2076     2255\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.98      0.97     0.03     3.50 1.00     2029     1418\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nThe as_draws_df() function also returns draws from the prior.\n\n\nCode\nas_draws_df(fit10.b) %&gt;% \n  head()\n\n\n# A draws_df: 6 iterations, 1 chains, and 5 variables\n  b_Intercept sigma Intercept lprior lp__\n1         4.2  1.08       4.2   -2.8 -2.7\n2         6.1  0.99       6.1   -2.1 -2.1\n3         5.8  0.99       5.8   -2.0 -2.0\n4         6.2  0.46       6.2   -1.6 -2.4\n5         6.2  0.49       6.2   -1.7 -2.4\n6         6.0  0.23       6.0   -1.3 -2.8\n# ... hidden reserved variables {'.chain', '.iteration', '.draw'}\n\n\nHere’s how we might use that as_draws_df() output to make a similar plot to the one we made before.\n\n\nCode\n# how many distributions do you want?\nn &lt;- 50\n\n# do you want to make the results reproducible?\n# set.seed(1)\n\nas_draws_df(fit10.b) %&gt;% \n  \n  # subset\n  slice_sample(n = n) %&gt;% \n  expand_grid(bty_avg = seq(from = -2, to = 13, by = 0.025)) %&gt;% \n  # notice we're defining the mean by b_Intercept\n  mutate(density = dnorm(x = bty_avg, mean = b_Intercept, sd = sigma)) %&gt;% \n  \n  ggplot(aes(x = bty_avg, y = density, \n             # notice we're grouping by .draw\n             group = .draw)) +\n  geom_line(linewidth = 1/3, alpha = 1/2) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  coord_cartesian(xlim = c(-1, 12),\n                  ylim = c(0, 3)) +\n  labs(subtitle = expression(\"Prior predictive distributions based on \"*italic(p)(beta[0])~and~italic(p)(sigma)))\n\n\n\n\n\n\n\n\n\nWe can also use functions like pp_check() to compare the prior to the sample data.\n\n\nCode\nset.seed(1)\npp_check(fit10.b, ndraws = 100) +\n  coord_cartesian(xlim = c(-1, 12),\n                  ylim = c(0, 3)) +\n  ggtitle(\"prior predictive check\")\n\n\n\n\n\n\n\n\n\nCode\nset.seed(2)\npp_check(fit10.b, ndraws = 8,\n         type = \"hist\", binwidth = 0.5) +\n  # yes, we can add our red lines to our pp-check\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  ggtitle(\"prior predictive check\")"
  },
  {
    "objectID": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#univariable-predictor-model",
    "href": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#univariable-predictor-model",
    "title": "PSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025",
    "section": "Univariable predictor model",
    "text": "Univariable predictor model\nNow we’ll add gender as the sole predictor in the model,\n\\[\n\\begin{align}\n\\text{bty_avg}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 \\text{gender}_i \\\\\n\\beta_0 & \\sim \\text{???} \\\\\n\\beta_1 & \\sim \\text{???} \\\\\n\\sigma & \\sim \\text{???}.\n\\end{align}\n\\]\nLet’s try these same set of \\(\\beta_0\\) priors\n\n\nCode\n# change as needed\n\nc(\n  prior(normal(5.5, 1)),\n  prior(normal(7, 0.5)),\n  prior(normal(5.5, 2))\n) %&gt;% \n  parse_dist() %&gt;% \n  \n  ggplot(aes(xdist = .dist_obj, y = prior)) + \n  stat_halfeye(point_interval = mean_qi, .width = c(.5, .95)) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  labs(subtitle = \"The red lines mark the lower and upper bondaries.\",\n       x = expression(italic(p)(beta[0])),\n      y = NULL)\n\n\n\n\n\n\n\n\n\nNow we update our by-hand prior predictive simulation to accomodate \\(\\beta_0\\) and \\(\\beta_1\\).\n\n\nCode\nn &lt;- 50\n\nset.seed(1)\n\ntibble(iter = 1:n,\n       beta0 = rnorm(n = n, mean = 5.5, sd = 1),\n       # notice our new line\n       beta1 = rnorm(n = n, mean = 0, sd = 1),\n       sigma = rexp(n = n, rate = 1 / 1)) %&gt;% \n  # we have a new expand_grid() line\n  # make sure everyone understands this coding scheme\n  expand_grid(gendermale = 0:1) %&gt;% \n  expand_grid(bty_avg = seq(from = -2, to = 13, by = 0.025)) %&gt;% \n  # notice the updated mean formula\n  mutate(density = dnorm(x = bty_avg, \n                         mean = beta0 + beta1 * gendermale, \n                         sd = sigma)) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = bty_avg, y = density, group = iter)) +\n  geom_line(linewidth = 1/3, alpha = 1/2) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  coord_cartesian(xlim = c(-1, 12),\n                  ylim = c(0, 3)) +\n  labs(subtitle = expression(\"Prior predictive distributions based on \"*italic(p)(beta[0])~ and~italic(p)(beta[1])~and~italic(p)(sigma))) +\n  facet_wrap(~ gendermale, labeller = label_both)\n\n\n\n\n\n\n\n\n\nBefore we fit the model, let’s practice the sample_prior = \"only\" approach.\n\n\nCode\n# check to see if we want to use other priors\n\nfit11.b = brm(\n  data = evals94,\n  family = gaussian,\n  # notice the 0 + Intercept syntax\n  bty_avg ~ 0 + Intercept + gender,\n  prior = prior(normal(5.5, 1), class = b, coef = Intercept) +\n    prior(normal(0, 1), class = b, coef = gendermale) +\n    prior(exponential(1), class = sigma),\n  # here's the magic\n  sample_prior = \"only\",\n  seed = 2\n)\n\n\nCheck the prior summary.\n\n\nCode\nsummary(fit11.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bty_avg ~ 0 + Intercept + gender \n   Data: evals94 (Number of observations: 94) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      5.49      0.98     3.58     7.40 1.00     3315     2688\ngendermale    -0.02      1.00    -1.93     1.90 1.00     3354     2634\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.00      1.00     0.03     3.55 1.00     2186     1435\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nCompare the prior with the data with pp_check().\n\n\nCode\nset.seed(1)\npp_check(fit11.b, \n         type = \"dens_overlay_grouped\",\n         group = \"gender\",\n         ndraws = 100) +\n  coord_cartesian(xlim = c(-1, 12),\n                  ylim = c(0, 3)) +\n  ggtitle(\"prior predictive check\")\n\n\n\n\n\n\n\n\n\nCode\nset.seed(2)\npp_check(fit11.b, ndraws = 5,\n         type = \"freqpoly_grouped\", group = \"gender\") +\n  # yes, we can add our red lines to our pp-check\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  ggtitle(\"prior predictive check\")\n\n\n\n\n\n\n\n\n\nThere isn’t a great grouped histogram option for pp_check(), so we experimented with type = \"freqpoly_grouped\" instead.\nIf we wanted, we could also use the predict() function to simulate bty_avg values from the priors.\n\n\nCode\n# walk through this slowly\n\nset.seed(1)\n\npredict(fit11.b,\n        summary = FALSE,\n        ndraws = 5) %&gt;% \n  str()\n\n\n num [1:5, 1:94] 4.1 7.4 2.61 6.32 6.22 ...\n - attr(*, \"dimnames\")=List of 2\n  ..$ : NULL\n  ..$ : NULL\n\n\n\n\nCode\n# customize the predictor grid, as desired\nnd &lt;- tibble(gender = rep(c(\"female\", \"male\"), each = 50)) %&gt;% \n  # this will make it easier to connect the nd data to the predict() output\n  mutate(row = 1:n())\n\nset.seed(1)\n\npredict(fit11.b,\n        newdata = nd,\n        summary = FALSE,\n        ndraws = 5) %&gt;% \n  data.frame() %&gt;% \n  mutate(draw = 1:n()) %&gt;% \n  pivot_longer(-draw) %&gt;% \n  mutate(row = str_remove(name, \"X\") %&gt;% as.double()) %&gt;% \n  left_join(nd, by = \"row\") %&gt;% \n  \n  ggplot(aes(x = value)) +\n  geom_histogram(binwidth = 0.5, boundary = 1) +\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  facet_grid(draw ~ gender, labeller = label_both)\n\n\n\n\n\n\n\n\n\nOnce we’ve settled on our priors, we should once again practice writing out the full model equation:\n\\[\n\\begin{align}\n\\text{bty_avg}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 \\text{gender}_i \\\\\n\\beta_0 & \\sim \\text{Normal}(5.5,1) \\\\\n\\beta_1 & \\sim \\text{Normal}(0,1) \\\\\n\\sigma & \\sim \\text{Exponential}(1).\n\\end{align}\n\\]\nOkay, let’s fit the real model.\n\n\nCode\n# check to see if we want to use other priors\n\nfit12.b = brm(\n  data = evals94,\n  family = gaussian,\n  bty_avg ~ 0 + Intercept + gender,\n  prior = prior(normal(5.5, 1), class = b, coef = Intercept) +\n    prior(normal(0, 1), class = b, coef = gendermale) +\n    prior(exponential(1), class = sigma),\n  \n  # yes, you can set your seed for your posteriors, too\n  # this makes the results reproducible\n  seed = 3\n)\n\n\nCheck the model summary.\n\n\nCode\nsummary(fit12.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bty_avg ~ 0 + Intercept + gender \n   Data: evals94 (Number of observations: 94) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n           Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      4.93      0.24     4.46     5.39 1.00     2151     1978\ngendermale    -0.55      0.31    -1.18     0.06 1.00     2219     2156\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     1.58      0.12     1.38     1.83 1.00     2709     2289\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nHow does the posterior-predictive check look?\n\n\nCode\nset.seed(1)\npp_check(fit12.b, \n         type = \"dens_overlay_grouped\",\n         group = \"gender\",\n         ndraws = 100) +\n  coord_cartesian(xlim = c(-1, 12)) +\n  ggtitle(\"posterior predictive check\")\n\n\n\n\n\n\n\n\n\nCode\nset.seed(2)\npp_check(fit12.b, ndraws = 5,\n         type = \"freqpoly_grouped\", group = \"gender\") +\n  # yes, we can add our red lines to our pp-check\n  geom_vline(xintercept = c(1, 10), color = \"red\") +\n  ggtitle(\"prior predictive check\")\n\n\n\n\n\n\n\n\n\n\nQuestion 6: Does the posterior predictive check look satsifactory to you?\nThe posterior predictive check look alright. The spread of \\(y\\) for both male and female is quite decently captured by the \\(y_{rep}\\) draws. However, the model still does not respect the upper and lower boundaries sometimes.\n\n\n\n\n\n\nNote\n\n\n\nFor more on prior predictive checks, see McElreath (from Chapter 4), and Solomon Kurz’s brms/tidverse implementations as well.\nFor a comprehensive guide to set priors for a given situation, look at reccomendations made by the Stan team https://github.com/stan-dev/stan/wiki/prior-choice-recommendations\nThey generally recommend against uniform priors on \\(\\beta\\) and \\(\\sigma\\) parameters. This is based on a general principle that you should not use a prior that places an artificial boundary on a parameter.\nE.g. \\(\\sigma\\) parameters have natural lower boundaries at zero, but they don’t have upper boundaries. Thus, a uniform prior adds an unnatural upper boundary. A better prior would be something that is weakly informative"
  },
  {
    "objectID": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#references",
    "href": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#references",
    "title": "PSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025",
    "section": "References",
    "text": "References\nHamermesh, D. S., & Parker, A. (2005). Beauty in the classroom: Instructors’ pulchritude and putative pedagogical productivity. Economics of Education Review, 24(4), 369-376. https://doi.org/10.1016/j.econedurev.2004.07.013\nKurz, A. S. (2023). Statistical Rethinking with brms, ggplot2, and the tidyverse: Second Edition (version 0.4.0). https://bookdown.org/content/4857/\nMcElreath, R. (2020). Statistical rethinking: A Bayesian course with examples in R and Stan (Second Edition). CRC Press. https://xcelab.net/rm/statistical-rethinking/"
  },
  {
    "objectID": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#session-information",
    "href": "posts/04-16 Bayes 3/Bayes_Lab_3_1_Priors and predictive checks.html#session-information",
    "title": "PSY 504: Bayes Lab 3, Priors and Predictive Checks April 16th, 2025",
    "section": "Session information",
    "text": "Session information\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS 15.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] truncnorm_1.0-9 tidybayes_3.0.7 brms_2.22.0     Rcpp_1.0.14    \n [5] lubridate_1.9.4 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n [9] purrr_1.0.4     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n[13] ggplot2_3.5.2   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] svUnit_1.0.6         tidyselect_1.2.1     farver_2.1.2        \n [4] loo_2.8.0            fastmap_1.2.0        tensorA_0.36.2.1    \n [7] digest_0.6.37        estimability_1.5.1   timechange_0.3.0    \n[10] lifecycle_1.0.4      StanHeaders_2.32.10  processx_3.8.5      \n[13] magrittr_2.0.3       posterior_1.6.0      compiler_4.4.1      \n[16] rlang_1.1.4          tools_4.4.1          yaml_2.3.10         \n[19] knitr_1.49           labeling_0.4.3       bridgesampling_1.1-2\n[22] htmlwidgets_1.6.4    pkgbuild_1.4.6       curl_6.2.0          \n[25] plyr_1.8.9           abind_1.4-8          withr_3.0.2         \n[28] numDeriv_2016.8-1.1  grid_4.4.1           stats4_4.4.1        \n[31] xtable_1.8-4         colorspace_2.1-1     inline_0.3.21       \n[34] emmeans_1.10.7       scales_1.3.0         cli_3.6.3           \n[37] mvtnorm_1.3-3        rmarkdown_2.28       generics_0.1.3      \n[40] RcppParallel_5.1.10  rstudioapi_0.17.1    reshape2_1.4.4      \n[43] tzdb_0.4.0           rstan_2.32.6         bayesplot_1.11.1    \n[46] parallel_4.4.1       matrixStats_1.5.0    vctrs_0.6.5         \n[49] V8_6.0.3             Matrix_1.7-0         jsonlite_1.8.8      \n[52] callr_3.7.6          hms_1.1.3            arrayhelpers_1.1-0  \n[55] ggdist_3.3.2         glue_1.8.0           codetools_0.2-20    \n[58] ps_1.9.0             distributional_0.5.0 stringi_1.8.4       \n[61] gtable_0.3.6         QuickJSR_1.5.2       munsell_0.5.1       \n[64] pillar_1.10.1        htmltools_0.5.8.1    Brobdingnag_1.2-9   \n[67] R6_2.5.1             evaluate_1.0.3       lattice_0.22-6      \n[70] backports_1.5.0      renv_1.0.7           rstantools_2.4.0    \n[73] coda_0.19-4.1        gridExtra_2.3        nlme_3.1-164        \n[76] checkmate_2.3.2      xfun_0.51            pkgconfig_2.0.3"
  },
  {
    "objectID": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html",
    "href": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html",
    "title": "PSY 504: Bayes Lab 3_2, HMC Diagnostics",
    "section": "",
    "text": "This worksheet helps to give you a better idea about what to do with the trace plots."
  },
  {
    "objectID": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#packages-and-data",
    "href": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#packages-and-data",
    "title": "PSY 504: Bayes Lab 3_2, HMC Diagnostics",
    "section": "Packages and data",
    "text": "Packages and data\nLoad the primary packages.\n\n\nCode\nlibrary(tidyverse)\nlibrary(faux)\nlibrary(GGally)\nlibrary(brms)\nlibrary(ggmcmc)\nlibrary(bayesplot)\n\n\nThis time we’ll simulate data with the faux package.\n\n\nCode\n# how many cases?\nn &lt;- 100\n\n# population values\nmu    &lt;- 0\nsigma &lt;- 1\nrho   &lt;- .5\n\n# simulate and save\nset.seed(1)\n\nd &lt;- rnorm_multi(\n  n = n,\n  mu = c(mu, mu),\n  sd = c(sigma, sigma), \n  r = rho, \n  varnames = list(\"x\", \"y\")\n)\n\nglimpse(d)\n\n\nRows: 100\nColumns: 2\n$ x &lt;dbl&gt; -0.232341576, 0.137981847, -0.268214782, 1.302539315, 0.612654423, -…\n$ y &lt;dbl&gt; -0.85270825, 0.18009772, -1.17913643, 1.46056809, -0.04193022, 0.173…\n\n\nWe might look at the data with a ggpairs() plot.\n\n\nCode\nd %&gt;% \n  ggpairs(diag = list(continuous = wrap(\"barDiag\", binwidth = 0.25)),\n          upper = list(continuous = wrap(\"cor\", stars = FALSE)))\n\n\n\n\n\n\n\n\n\nCheck the sample statistics.\n\n\nCode\n# univariate\nd %&gt;% \n  pivot_longer(everything()) %&gt;% \n  group_by(name) %&gt;% \n  summarise(m = mean(value),\n            s = sd(value))\n\n\n# A tibble: 2 × 3\n  name       m     s\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1 x     0.113  0.914\n2 y     0.0754 0.913\n\n\nCode\n# bivariate\nd %&gt;% \n  summarise(r = cor(y, x))\n\n\n          r\n1 0.4502206"
  },
  {
    "objectID": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#base-model",
    "href": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#base-model",
    "title": "PSY 504: Bayes Lab 3_2, HMC Diagnostics",
    "section": "Base model",
    "text": "Base model\nLet’s fit a simple model\n\\[\n\\begin{align}\ny_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 x_i \\\\\n\\beta_0 & \\sim \\operatorname{Normal}(0, 1) \\\\\n\\beta_1 & \\sim \\operatorname{Normal}(0, 1) \\\\\n\\sigma & \\sim \\operatorname{Exponential}(1),\n\\end{align}\n\\]\nAs we fit the model with brm(), take the opportunity to consider some of the default settings.\n\n\nCode\nfit13.b &lt;- brm(\n  data = d,\n  family = gaussian,\n  y ~ 1 + x,\n  prior = prior(normal(0, 1), class = Intercept) +\n    prior(normal(0, 1), class = b) +\n    prior(exponential(1), class = sigma),\n  seed = 13,\n  \n  # default settings we've been ignoring up to this point\n  iter = 2000, warmup = 1000, chains = 4, cores = 1\n  # if you have a good computer, maybe try setting cores = 4\n)\n\n\nIf you’d like to use multiple cores, but you’re not sure how many you have, execute parallel::detectCores().\n\nQuestion 1: How many cores do you have?\n\n\nCode\nparallel::detectCores()\n\n\n[1] 12\n\n\nI have 12 cores.\nCheck the model summary.\n\n\nCode\nsummary(fit13.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: y ~ 1 + x \n   Data: d (Number of observations: 100) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept     0.03      0.08    -0.13     0.18 1.00     3868     3294\nx             0.45      0.09     0.27     0.63 1.00     4470     2925\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.83      0.06     0.72     0.95 1.00     3447     2920\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nLook at the parameter posteriors in a pairs() plot.\n\n\nCode\npairs(fit13.b, \n      off_diag_args = list(size = 1/3, alpha = 1/3))\n\n\n\n\n\n\n\n\n\nThe pairs() plot is a wrapper around the mcmc_pairs() function from bayesplot. By default, half of the chains are depicted in the scatter plots below the diagonal, and the other half are displayed above the diagonal. The basic idea is you want the results form different chains to mirror one another. You can control this behavior with the condition argument.\n\n\nCode\npairs(fit13.b, \n      off_diag_args = list(size = 1/3, alpha = 1/3),\n      # here we put the first chain in above the diagonal,\n      # and we put the second through fourth chains below the diagonal\n      condition = pairs_condition(chains = list(1, 2:4)))\n\n\n\n\n\n\n\n\n\nThis particular arrangement is a little silly, but it should give you a sense of how to control the output. Also, by default the histograms on the diagonal use the draws from all the chains.\nIf you wanted, you could also make a similar kind of plot with ggpairs().\n\n\nCode\nas_draws_df(fit13.b) %&gt;% \n  select(b_Intercept:sigma) %&gt;% \n  ggpairs(diag = list(continuous = wrap(\"barDiag\", bins = 25)),\n          upper = list(continuous = wrap(\"cor\", stars = FALSE)),\n          lower = list(continuous = wrap(\"points\", size = 1/4, alpha = 1/3)))\n\n\n\n\n\n\n\n\n\nNow take a look at the plot() output.\n\n\nCode\nplot(fit13.b, widths = c(1, 2))\n\n\n\n\n\n\n\n\n\nThese trace plots look like a dream. They have the appearance of fuzzy caterpillars, which is why they’re even sometimes called caterpillar plots.\nLet’s work directly with the chains via as_draws_df().\n\n\nCode\nas_draws_df(fit13.b) %&gt;% \n  # notice the 3 meta-data columns at the end\n  glimpse()\n\n\nRows: 4,000\nColumns: 9\n$ b_Intercept &lt;dbl&gt; 0.03551043, 0.10296856, -0.00374354, 0.03544423, -0.043189…\n$ b_x         &lt;dbl&gt; 0.4729974, 0.3704769, 0.3525468, 0.3349094, 0.3238866, 0.5…\n$ sigma       &lt;dbl&gt; 0.8361793, 0.8490243, 0.8223383, 0.8222226, 0.8103350, 0.8…\n$ Intercept   &lt;dbl&gt; 0.0890552806, 0.1449077557, 0.0361659049, 0.0733570717, -0…\n$ lprior      &lt;dbl&gt; -2.789885, -2.766027, -2.723014, -2.718872, -2.700685, -2.…\n$ lp__        &lt;dbl&gt; -124.0759, -124.7992, -124.6012, -124.7124, -125.3926, -12…\n$ .chain      &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ .iteration  &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n$ .draw       &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,…\n\n\nWe can use those meta-data columns to make our own trace plots with ggplot functions.\n\n\nCode\nas_draws_df(fit13.b) %&gt;% \n  pivot_longer(b_Intercept:sigma) %&gt;% \n  mutate(.chain = factor(.chain),\n         # not needed, but makes for Greek formatted strip labels\n         greek = case_when(\n    name == \"b_Intercept\" ~ \"beta[0]\",\n    name == \"b_x\"         ~ \"beta[1]\",\n    name == \"sigma\"       ~ \"sigma\"\n  )) %&gt;% \n  \n  ggplot(aes(x = .iteration, y = value, color = .chain)) +\n  geom_line(linewidth = 1/3) +\n  scale_color_viridis_d(option = \"B\", end = .9) +\n  ggtitle(\"Hand-made trace plots!\") +\n  facet_wrap(~ greek, labeller = label_parsed, scales = \"free_y\")\n\n\n\n\n\n\n\n\n\nWe might restrict to the first few post-warmup iterations to help give us a better sense of what’s happening.\n\n\nCode\nas_draws_df(fit13.b) %&gt;% \n  filter(.iteration &lt; 21) %&gt;% \n  pivot_longer(b_Intercept:sigma) %&gt;% \n  mutate(.chain = factor(.chain),\n         # not needed, but makes for nice formatting\n         greek = case_when(\n    name == \"b_Intercept\" ~ \"beta[0]\",\n    name == \"b_x\"         ~ \"beta[1]\",\n    name == \"sigma\"       ~ \"sigma\"\n  )) %&gt;% \n  \n  ggplot(aes(x = .iteration, y = value, color = .chain)) +\n  geom_line(linewidth = 1) +\n  scale_color_viridis_d(option = \"B\", end = .9) +\n  ggtitle(\"Hand-made trace plots (zoomed in)\") +\n  facet_wrap(~ greek, labeller = label_parsed, scales = \"free_y\")\n\n\n\n\n\n\n\n\n\nNote that these are all post-warmup draws. The brms package doesn’t make it easy to visualize the warmup draws. But we can do so with a little help from the ggmcmc package’s ggs() function.\n\n\nCode\n# first execute without summarise()\nggs(fit13.b) %&gt;% \n  summarise(min = min(Iteration),\n            max = max(Iteration))\n\n\n# A tibble: 1 × 2\n    min   max\n  &lt;int&gt; &lt;int&gt;\n1     1  2000\n\n\nNote how how the values in the Iteration column range from 1 to 2,000. By brms default, the first 1,000 of those iterations are the warmup’s. Here is how we can use the ggs() output to make trace plots that include the warmup draws.\n\n\nCode\nggs(fit13.b) %&gt;% \n  filter(Parameter != \"lprior\") %&gt;% \n  mutate(Chain = factor(Chain),\n         greek = case_when(\n    Parameter == \"b_Intercept\" ~ \"beta[0]\",\n    Parameter == \"b_x\"         ~ \"beta[1]\",\n    Parameter == \"sigma\"       ~ \"sigma\"\n  )) %&gt;% \n  \n  ggplot(aes(x = Iteration, y = value, color = Chain)) +\n  # this marks off the warmups\n  annotate(geom = \"rect\", \n           xmin = 0, xmax = 1000, ymin = -Inf, ymax = Inf,\n           fill = \"black\", alpha = 1/6, linewidth = 0) +\n  geom_line(linewidth = 1/3) +\n  scale_color_viridis_d(option = \"B\", end = .9) +\n  labs(title = \"More hand-made trace plots\",\n       subtitle = \"warmup/post-warmup by background\") +\n  facet_wrap(~ greek, labeller = label_parsed, scales = \"free_y\")\n\n\n\n\n\n\n\n\n\nLet’s take a closer look at the first few warmup iterations.\n\n\nCode\nggs(fit13.b) %&gt;% \n  filter(Parameter != \"lprior\") %&gt;% \n  mutate(Chain = factor(Chain),\n         greek = case_when(\n    Parameter == \"b_Intercept\" ~ \"beta[0]\",\n    Parameter == \"b_x\"         ~ \"beta[1]\",\n    Parameter == \"sigma\"       ~ \"sigma\"\n  )) %&gt;% \n  \n  ggplot(aes(x = Iteration, y = value, color = Chain)) +\n  annotate(geom = \"rect\", \n           xmin = 0, xmax = 1000, ymin = -Inf, ymax = Inf,\n           fill = \"black\", alpha = 1/6, linewidth = 0) +\n  geom_line(linewidth = 2/3) +\n  scale_color_viridis_d(option = \"B\", end = .9) +\n  coord_cartesian(xlim = c(0, 50)) +\n  labs(title = \"More hand-made trace plots (zoomed in)\",\n       subtitle = \"warmup only\") +\n  facet_wrap(~ greek, labeller = label_parsed, scales = \"free_y\")\n\n\n\n\n\n\n\n\n\n\n\nQuestion 2: Can you use the results here to describe the need for discarding warmup draws?\nIn the first few warmup draws, the chain values are quite unstable. They are not representative of the target posterior distribution and are used solely to tune the sampler. The warmup iterations are heavily influenced by the initial parameters. Discarding them ensures that inferences are made only using samples from the well-explored, adapted phase of sampling.\nAnother issue is autocorrelation, the degree to which a given HMC draw is correlated with the previous draw(s). We can make a plot of the autocorrelations with the mcmc_acf() function from the bayesplot package.\n\n\nCode\nfit13.b %&gt;% \n  mcmc_acf(pars = vars(b_Intercept, b_x, sigma),\n           lags = 10)  # lags = 20 is the default\n\n\n\n\n\n\n\n\n\nThis is what we like to see: Nice L-shaped autocorrelation plots. Low autocorrelations like this are one of the major achievements of Stan’s implementation of HMC. It’s not uncommon for MCMC via the older Gibbs sampler method to routinely show much higher autocorrelations. You can get a sense of this by comparing the various models in Kruschke’s (2015) textbook, which often uses the Gibbs sampler, versus their brms() analogues in my (2023) ebook translation.\n\n\n\n\n\n\nNote\n\n\n\nMixing describes how efficiently MCMC chains explore the posterior distribution. Good mixing means samples move freely across the parameter space. And high autocorrelation =&gt; poor mixing.\n\n\n\n\nQuestion 3: Why are L-shaped autocorrelation plots are desirable? What would an undesirable autocorrelation plot look like?\nBecause you want no autocorrelation between the draws, which indicate that the samples are nearly independent and that the sampler is exploring the posterior efficiently. At the first few warmup iterations, the autocorrelation would be high but should drop off quickly. This is also why we discard the first few warmup iterations.\nAn undesirable autocorrelation would be where the autocorrelation does not drop off quickly and instead plateus. This means that the chain is highly correlated and it would take longer to explore the posterior space.\nThose low autocorrelations also have a lot to do with our effective sample size (ESS) estimates. Take another look at the summary() output.\n\n\nCode\nsummary(fit13.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: y ~ 1 + x \n   Data: d (Number of observations: 100) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept     0.03      0.08    -0.13     0.18 1.00     3868     3294\nx             0.45      0.09     0.27     0.63 1.00     4470     2925\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.83      0.06     0.72     0.95 1.00     3447     2920\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nThere used to be a single ESS column. Starting with version 2.10.0, brms returns two columns: Bulk_ESS and Tail_ESS. These originate from Vehtari et al (2019). From the paper, we read:\n\nWhen reporting quantile estimates or posterior intervals, we strongly suggest assessing the convergence of the chains for these quantiles. In Section 4.3, we show that convergence of Markov chains is not uniform across the parameter space, that is, convergence might be different in the bulk of the distribution (e.g., for the mean or median) than in the tails (e.g., for extreme quantiles). We propose diagnostics and effective sample sizes specifically for extreme quantiles. This is different from the standard ESS estimate (which we refer to as bulk-ESS), which mainly assesses how well the centre of the distribution is resolved. Instead, these “tail-ESS” measures allow the user to estimate the MCSE for interval estimates. (pp. 672-673)\n\nWe generally like the values in both the Bulk_ESS and Tail_ESS columns to be as close to the total number of post-warmup draws as possible, which would be 4,000 for a default brm() model. Sometimes, as in the case of the Bulk_ESS value for our \\(\\beta_1\\) parameter, the HMC chains are so efficient that we can get larger numbers than the actual number of post-warmup draws. This is related to when we have negative autocorrelations (see above).\nHow much is enough, and how low is too low? Yeah, indeed… Higher is generally better, with diminishing returns rolling in somewhere between 1,000 and 10,000. brms will give you a warning message when the ESS estimates get below a couple hundred.\nNow look back at the Rhat column in the summary() output. This is the potential scale reduction factor \\(\\hat R\\). It has its origins in Gelman & Rubin (1992), but the current version used in brms is from Vehtari et al (2019), as cited above. In short, it is something of a ratio of the between-chain variation versus the within-chain variation. This ratio is usually a little above 1, and we want it to be as close to 1 as possible. The Stan team (e.g., https://mc-stan.org/rstan/reference/Rhat.html) recommends against values greater than 1.05. In our case, we’re good to go."
  },
  {
    "objectID": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#what-bad-chains-look-like..",
    "href": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#what-bad-chains-look-like..",
    "title": "PSY 504: Bayes Lab 3_2, HMC Diagnostics",
    "section": "What bad chains look like..",
    "text": "What bad chains look like..\nNow let’s break the model. This time, we’ll subset the d data to just the first 2 rows, we’ll make the priors very wide on the scale of the data, and we’ll dramatically reduce the warmup period.\n\n\nCode\nfit14.b &lt;- brm(\n  data = d %&gt;% slice(1:2),\n  family = gaussian,\n  y ~ 1 + x,\n  # don't use priors like this for real data analyses\n  prior = prior(normal(0, 100000), class = Intercept) +\n    prior(normal(0, 100000), class = b) +\n    prior(uniform(0, 100000), class = sigma),\n  seed = 14,\n  iter = 1100, warmup = 100, chains = 4, cores = 4\n)\n\n\nCheck the parameter summary.\n\n\nCode\nprint(fit14.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: y ~ 1 + x \n   Data: d %&gt;% slice(1:2) (Number of observations: 2) \n  Draws: 4 chains, each with iter = 1100; warmup = 100; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error  l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept -1782.00   3889.59 -12359.76  4349.70 1.60        7       13\nx         -1229.97   5509.65 -12317.78  8154.73 2.34        5       14\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma 10474.76  15021.51   118.08 58196.81 1.26       11       84\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nNever ignore Warning messages like that.\nThose Rhat, Bulk_ESS, and Tail_ESS look really bad. Also notice how large the posterior means (Estimate) and standard deviations (Est.Error) are. Seems off, eh?\nLet’s investigate further with a pairs() plot.\n\n\nCode\nplot(fit14.b, widths = c(1, 2))\n\n\n\n\n\n\n\n\n\nThis is a full-scale disaster. DO NOT trust model results from chains that look like this.\nIn this case, just giving the model a longer warmup period helped a lot.\n\n\nCode\nfit15.b &lt;- brm(\n  data = d %&gt;% slice(1:2),\n  family = gaussian,\n  y ~ 1 + x,\n  # don't use priors like this in real life\n  prior = prior(normal(0, 100000), class = Intercept) +\n    prior(normal(0, 100000), class = b) +\n    prior(uniform(0, 100000), class = sigma),\n  seed = 14,\n  iter = 2000, warmup = 1000, chains = 4, cores = 4\n)\n\n\n\n\nCode\nplot(fit15.b, widths = c(1, 2))\n\n\n\n\n\n\n\n\n\nWe still have a lot of Warning messages, but things have improved.\nWe can do an even better with default weakly-regularizing priors.\n\n\nCode\nfit16.b &lt;- brm(\n  data = d %&gt;% slice(1:2),\n  family = gaussian,\n  y ~ 1 + x,\n  prior = prior(normal(0, 1), class = Intercept) +\n    prior(normal(0, 1), class = b) +\n    prior(exponential(1), class = sigma),\n  seed = 14,\n  iter = 2000, warmup = 1000, chains = 4, cores = 4\n)\n\n\n\n\nCode\nplot(fit16.b, widths = c(1, 2))\n\n\n\n\n\n\n\n\n\nNow look at the parameter summaries.\n\n\nCode\nprint(fit16.b)\n\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: y ~ 1 + x \n   Data: d %&gt;% slice(1:2) (Number of observations: 2) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n          Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept    -0.22      0.53    -1.28     0.94 1.01     2130     1856\nx             0.50      1.02    -1.52     2.43 1.00     1256      960\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     0.86      0.57     0.17     2.35 1.01      728      245\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nThose Warning messages still remain, but they’re less dire than before. Also, most of the other diagnostics look better. I still wouldn’t trust this model. It is only based on 2 data points, after all. But look how far we got by paying attention to the diagnostics and picking better priors."
  },
  {
    "objectID": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#references",
    "href": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#references",
    "title": "PSY 504: Bayes Lab 3_2, HMC Diagnostics",
    "section": "References",
    "text": "References\nGelman, A. and Rubin, D. (1992). Inference from iterative simulation using multiple sequences. Statistical Science, 7(4):457–472. https://dx.doi.org/10.1214/ss/1177011136\nKruschke, J. K. (2015). Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan. Academic Press. https://sites.google.com/site/doingbayesiandataanalysis/\nKurz, A. S. (2023). Doing Bayesian data analysis in brms and the tidyverse (Version 1.1.0). https://bookdown.org/content/3686/\nMcElreath, R. (2020). Statistical rethinking: A Bayesian course with examples in R and Stan (Second Edition). CRC Press. https://xcelab.net/rm/statistical-rethinking/\nVehtari, A., Gelman, A., Simpson, D., Carpenter, B., & Bürkner, P.-C. (2019). Rank-normalization, folding, and localization: An improved \\(\\widehat R\\) for assessing convergence of MCMC (with discussion). Bayesian Analysis, 16(2), 667-718. https://doi.org/10.1214/20-BA1221"
  },
  {
    "objectID": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#session-information",
    "href": "posts/04-16 Bayes 3-2/Bayes_Lab_3_2_HMC Diagnostics.html#session-information",
    "title": "PSY 504: Bayes Lab 3_2, HMC Diagnostics",
    "section": "Session information",
    "text": "Session information\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.1 (2024-06-14)\nPlatform: x86_64-apple-darwin20\nRunning under: macOS 15.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices datasets  utils     methods   base     \n\nother attached packages:\n [1] bayesplot_1.11.1 ggmcmc_1.5.1.1   brms_2.22.0      Rcpp_1.0.14     \n [5] GGally_2.2.1     faux_1.2.2       lubridate_1.9.4  forcats_1.0.0   \n [9] stringr_1.5.1    dplyr_1.1.4      purrr_1.0.4      readr_2.1.5     \n[13] tidyr_1.3.1      tibble_3.2.1     ggplot2_3.5.2    tidyverse_2.0.0 \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     viridisLite_0.4.2    farver_2.1.2        \n [4] loo_2.8.0            fastmap_1.2.0        tensorA_0.36.2.1    \n [7] digest_0.6.37        timechange_0.3.0     estimability_1.5.1  \n[10] lifecycle_1.0.4      StanHeaders_2.32.10  processx_3.8.5      \n[13] magrittr_2.0.3       posterior_1.6.0      compiler_4.4.1      \n[16] rlang_1.1.4          tools_4.4.1          utf8_1.2.4          \n[19] yaml_2.3.10          knitr_1.49           labeling_0.4.3      \n[22] bridgesampling_1.1-2 htmlwidgets_1.6.4    pkgbuild_1.4.6      \n[25] curl_6.2.0           plyr_1.8.9           RColorBrewer_1.1-3  \n[28] abind_1.4-8          withr_3.0.2          grid_4.4.1          \n[31] stats4_4.4.1         xtable_1.8-4         colorspace_2.1-1    \n[34] inline_0.3.21        emmeans_1.10.7       scales_1.3.0        \n[37] cli_3.6.3            mvtnorm_1.3-3        rmarkdown_2.28      \n[40] generics_0.1.3       RcppParallel_5.1.10  rstudioapi_0.17.1   \n[43] reshape2_1.4.4       tzdb_0.4.0           rstan_2.32.6        \n[46] parallel_4.4.1       matrixStats_1.5.0    vctrs_0.6.5         \n[49] V8_6.0.3             Matrix_1.7-0         jsonlite_1.8.8      \n[52] callr_3.7.6          hms_1.1.3            glue_1.8.0          \n[55] ps_1.9.0             ggstats_0.9.0        codetools_0.2-20    \n[58] distributional_0.5.0 stringi_1.8.4        gtable_0.3.6        \n[61] QuickJSR_1.5.2       munsell_0.5.1        pillar_1.10.1       \n[64] htmltools_0.5.8.1    Brobdingnag_1.2-9    R6_2.5.1            \n[67] evaluate_1.0.3       lattice_0.22-6       backports_1.5.0     \n[70] renv_1.0.7           rstantools_2.4.0     coda_0.19-4.1       \n[73] gridExtra_2.3        nlme_3.1-164         checkmate_2.3.2     \n[76] xfun_0.51            pkgconfig_2.0.3"
  }
]